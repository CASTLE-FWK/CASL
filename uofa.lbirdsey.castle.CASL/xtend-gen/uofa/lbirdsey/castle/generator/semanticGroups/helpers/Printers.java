package uofa.lbirdsey.castle.generator.semanticGroups.helpers;

import java.text.SimpleDateFormat;
import java.util.Date;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.ExclusiveRange;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import uofa.lbirdsey.castle.casl.Addition;
import uofa.lbirdsey.castle.casl.Agent;
import uofa.lbirdsey.castle.casl.AgentFieldReference;
import uofa.lbirdsey.castle.casl.Agent_Call;
import uofa.lbirdsey.castle.casl.ArithmeticSigned;
import uofa.lbirdsey.castle.casl.BooleanExpression;
import uofa.lbirdsey.castle.casl.BooleanNegation;
import uofa.lbirdsey.castle.casl.BooleanType;
import uofa.lbirdsey.castle.casl.Comparison;
import uofa.lbirdsey.castle.casl.DataTypeDeclaration;
import uofa.lbirdsey.castle.casl.Div;
import uofa.lbirdsey.castle.casl.ElseIfExpr;
import uofa.lbirdsey.castle.casl.EnumCallExpr;
import uofa.lbirdsey.castle.casl.Environment;
import uofa.lbirdsey.castle.casl.EnvironmentFieldReference;
import uofa.lbirdsey.castle.casl.Environment_Call;
import uofa.lbirdsey.castle.casl.Equals;
import uofa.lbirdsey.castle.casl.Expression;
import uofa.lbirdsey.castle.casl.FeatureCall;
import uofa.lbirdsey.castle.casl.FeatureCallExp;
import uofa.lbirdsey.castle.casl.Field;
import uofa.lbirdsey.castle.casl.ForEachLoop;
import uofa.lbirdsey.castle.casl.ForKeywords;
import uofa.lbirdsey.castle.casl.ForLoop;
import uofa.lbirdsey.castle.casl.Formula;
import uofa.lbirdsey.castle.casl.FunctionCallExpr;
import uofa.lbirdsey.castle.casl.Group;
import uofa.lbirdsey.castle.casl.GroupFieldReference;
import uofa.lbirdsey.castle.casl.Group_Call;
import uofa.lbirdsey.castle.casl.IfStatement;
import uofa.lbirdsey.castle.casl.MacroCall;
import uofa.lbirdsey.castle.casl.Multiplication;
import uofa.lbirdsey.castle.casl.NonPrimitiveType;
import uofa.lbirdsey.castle.casl.NullTypeLiteral;
import uofa.lbirdsey.castle.casl.NumberLiteral;
import uofa.lbirdsey.castle.casl.PrimitiveType;
import uofa.lbirdsey.castle.casl.SelfAssignedFormula;
import uofa.lbirdsey.castle.casl.SelfCallExpr;
import uofa.lbirdsey.castle.casl.StringLiteral;
import uofa.lbirdsey.castle.casl.StringType;
import uofa.lbirdsey.castle.casl.Subtraction;
import uofa.lbirdsey.castle.casl.Symbol;
import uofa.lbirdsey.castle.casl.SystemCallObj;
import uofa.lbirdsey.castle.casl.TypeRef;
import uofa.lbirdsey.castle.generator.semanticGroups.FeatureCallGenerator;
import uofa.lbirdsey.castle.generator.semanticGroups.MacroGenerator;
import uofa.lbirdsey.castle.generator.semanticGroups.helpers.Constants;
import uofa.lbirdsey.castle.generator.semanticGroups.helpers.HelperFunctions;
import uofa.lbirdsey.castle.generator.semanticGroups.helpers.Helpers;

@SuppressWarnings("all")
public class Printers {
  public static String copyrightPrint(final String fname) {
    String copyrightNote = "";
    String fileName = fname.replaceAll(" ", "").trim();
    final SimpleDateFormat dateFormat = new SimpleDateFormat("HH:mm:ss \'on\' yyyy/MM/dd");
    final Date date = new Date();
    final String timeStamp = dateFormat.format(date);
    String output = ((((((((((((((("/*******************\n" + "*\n") + "*\tThis class file \"") + fileName) + 
      ".java\" was generated by CASTLE\n") + "*\tCASTLE was created by Lachlan Birdsey as part of his PhD work\n") + 
      "*\tAt The University of Adelaide (www.adelaide.edu.au)\n") + 
      "*\tCASTLE Project: http://github.com/castle-fwk\n") + "*\tContact: lachlan.birdsey@adelaide.edu.au\n") + 
      "*\t") + copyrightNote) + "\n") + 
      "\tCreated at ") + timeStamp) + "\n") + "*******************/\n");
    return output;
  }
  
  public static String getNameForTrigger(final String s) {
    return (s + "_Trigger");
  }
  
  public static String printFieldDeclarations(final Field f) {
    String _xblockexpression = null;
    {
      String output = "";
      String _xifexpression = null;
      Symbol _declaration = f.getDeclaration();
      boolean _tripleNotEquals = (_declaration != null);
      if (_tripleNotEquals) {
        String _xblockexpression_1 = null;
        {
          Symbol _declaration_1 = f.getDeclaration();
          final DataTypeDeclaration fdt = ((DataTypeDeclaration) _declaration_1);
          String _xifexpression_1 = null;
          PrimitiveType _type = fdt.getType();
          boolean _tripleNotEquals_1 = (_type != null);
          if (_tripleNotEquals_1) {
            String _xifexpression_2 = null;
            Expression _expr = fdt.getExpr();
            boolean _tripleNotEquals_2 = (_expr != null);
            if (_tripleNotEquals_2) {
              String _output = output;
              String _name = fdt.getType().getName();
              String _plus = (_name + " ");
              String _name_1 = fdt.getName();
              String _plus_1 = (_plus + _name_1);
              String _plus_2 = (_plus_1 + " = ");
              Object _printExpression = Printers.printExpression(fdt.getExpr(), fdt.getName());
              String _plus_3 = (_plus_2 + _printExpression);
              _xifexpression_2 = output = (_output + _plus_3);
            } else {
              String _xifexpression_3 = null;
              int _compareTo = fdt.getType().getName().compareTo(StringType.class.getName());
              boolean _equals = (_compareTo == 0);
              if (_equals) {
                String _output_1 = output;
                String _name_2 = fdt.getType().getName();
                String _plus_4 = (_name_2 + " ");
                String _name_3 = fdt.getName();
                String _plus_5 = (_plus_4 + _name_3);
                String _plus_6 = (_plus_5 + " = \"\"");
                _xifexpression_3 = output = (_output_1 + _plus_6);
              } else {
                String _output_2 = output;
                String _name_4 = fdt.getType().getName();
                String _plus_7 = (_name_4 + " ");
                String _name_5 = fdt.getName();
                String _plus_8 = (_plus_7 + _name_5);
                _xifexpression_3 = output = (_output_2 + _plus_8);
              }
              _xifexpression_2 = _xifexpression_3;
            }
            _xifexpression_1 = _xifexpression_2;
          } else {
            String _xifexpression_4 = null;
            NonPrimitiveType _obj = fdt.getObj();
            boolean _tripleNotEquals_3 = (_obj != null);
            if (_tripleNotEquals_3) {
              String _xifexpression_5 = null;
              NonPrimitiveType _obj_1 = fdt.getObj();
              if ((_obj_1 instanceof uofa.lbirdsey.castle.casl.Enum)) {
                String _xifexpression_6 = null;
                Expression _expr_1 = fdt.getExpr();
                boolean _tripleNotEquals_4 = (_expr_1 != null);
                if (_tripleNotEquals_4) {
                  String _output_3 = output;
                  String _name_6 = fdt.getObj().getName();
                  String _plus_9 = (_name_6 + " ");
                  String _name_7 = fdt.getName();
                  String _plus_10 = (_plus_9 + _name_7);
                  String _plus_11 = (_plus_10 + " = ");
                  Object _printExpression_1 = Printers.printExpression(fdt.getExpr(), fdt.getName());
                  String _plus_12 = (_plus_11 + _printExpression_1);
                  _xifexpression_6 = output = (_output_3 + _plus_12);
                } else {
                  String _xifexpression_7 = null;
                  if (((fdt.getUseObj() != null) && (fdt.getUseObj().size() > 0))) {
                    String _xblockexpression_2 = null;
                    {
                      String _name_8 = fdt.getObj().getName();
                      String _plus_13 = (_name_8 + "   ");
                      String _name_9 = fdt.getName();
                      String _plus_14 = (_plus_13 + _name_9);
                      InputOutput.<String>println(_plus_14);
                      String _output_4 = output;
                      String _name_10 = fdt.getObj().getName();
                      String _plus_15 = (_name_10 + "<");
                      output = (_output_4 + _plus_15);
                      for (int i = 0; (i < (fdt.getUseObj().size() - 1)); i++) {
                        String _output_5 = output;
                        String _name_11 = fdt.getUseObj().get(i).getName();
                        String _plus_16 = (_name_11 + ", ");
                        output = (_output_5 + _plus_16);
                      }
                      String _output_5 = output;
                      EList<NonPrimitiveType> _useObj = fdt.getUseObj();
                      int _size = fdt.getUseObj().size();
                      int _minus = (_size - 1);
                      String _name_11 = _useObj.get(_minus).getName();
                      output = (_output_5 + _name_11);
                      String _output_6 = output;
                      String _name_12 = fdt.getName();
                      String _plus_16 = ("> " + _name_12);
                      String _plus_17 = (_plus_16 + " = new ");
                      String _name_13 = fdt.getObj().getName();
                      String _plus_18 = (_plus_17 + _name_13);
                      String _plus_19 = (_plus_18 + "<");
                      output = (_output_6 + _plus_19);
                      for (int i = 0; (i < (fdt.getUseObj().size() - 1)); i++) {
                        String _output_7 = output;
                        String _name_14 = fdt.getUseObj().get(i).getName();
                        String _plus_20 = (_name_14 + ", ");
                        output = (_output_7 + _plus_20);
                      }
                      String _output_7 = output;
                      EList<NonPrimitiveType> _useObj_1 = fdt.getUseObj();
                      int _size_1 = fdt.getUseObj().size();
                      int _minus_1 = (_size_1 - 1);
                      String _name_14 = _useObj_1.get(_minus_1).getName();
                      output = (_output_7 + _name_14);
                      String _output_8 = output;
                      _xblockexpression_2 = output = (_output_8 + ">()");
                    }
                    _xifexpression_7 = _xblockexpression_2;
                  } else {
                    String _output_4 = output;
                    String _name_8 = fdt.getObj().getName();
                    String _plus_13 = (_name_8 + " ");
                    String _name_9 = fdt.getName();
                    String _plus_14 = (_plus_13 + _name_9);
                    _xifexpression_7 = output = (_output_4 + _plus_14);
                  }
                  _xifexpression_6 = _xifexpression_7;
                }
                _xifexpression_5 = _xifexpression_6;
              } else {
                String _xifexpression_8 = null;
                NonPrimitiveType _obj_2 = fdt.getObj();
                if ((_obj_2 instanceof uofa.lbirdsey.castle.casl.Object)) {
                  String _xifexpression_9 = null;
                  Expression _expr_2 = fdt.getExpr();
                  boolean _tripleNotEquals_5 = (_expr_2 != null);
                  if (_tripleNotEquals_5) {
                    String _xblockexpression_3 = null;
                    {
                      if (((fdt.getUseObj() != null) && (fdt.getUseObj().size() > 0))) {
                        String _output_5 = output;
                        String _name_10 = fdt.getObj().getName();
                        String _plus_15 = (_name_10 + "<");
                        output = (_output_5 + _plus_15);
                        for (int i = 0; (i < (fdt.getUseObj().size() - 1)); i++) {
                          String _output_6 = output;
                          String _name_11 = fdt.getUseObj().get(i).getName();
                          String _plus_16 = (_name_11 + ", ");
                          output = (_output_6 + _plus_16);
                        }
                        String _output_6 = output;
                        EList<NonPrimitiveType> _useObj = fdt.getUseObj();
                        int _size = fdt.getUseObj().size();
                        int _minus = (_size - 1);
                        String _name_11 = _useObj.get(_minus).getName();
                        String _plus_16 = (_name_11 + "> ");
                        String _name_12 = fdt.getName();
                        String _plus_17 = (_plus_16 + _name_12);
                        output = (_output_6 + _plus_17);
                      } else {
                        if (((fdt.getUseGroup() != null) && (fdt.getUseGroup().size() > 0))) {
                          String _output_7 = output;
                          String _name_13 = fdt.getObj().getName();
                          String _plus_18 = (_name_13 + "<");
                          output = (_output_7 + _plus_18);
                          for (int i = 0; (i < (fdt.getUseGroup().size() - 1)); i++) {
                            String _output_8 = output;
                            String _name_14 = fdt.getUseGroup().get(i).getName();
                            String _plus_19 = (_name_14 + ", ");
                            output = (_output_8 + _plus_19);
                          }
                          String _output_8 = output;
                          EList<Group> _useGroup = fdt.getUseGroup();
                          int _size_1 = fdt.getUseGroup().size();
                          int _minus_1 = (_size_1 - 1);
                          String _name_14 = _useGroup.get(_minus_1).getName();
                          String _plus_19 = (_name_14 + "> ");
                          String _name_15 = fdt.getName();
                          String _plus_20 = (_plus_19 + _name_15);
                          output = (_output_8 + _plus_20);
                        } else {
                          if (((fdt.getUseAgent() != null) && (fdt.getUseAgent().size() > 0))) {
                            String _output_9 = output;
                            String _name_16 = fdt.getObj().getName();
                            String _plus_21 = (_name_16 + "<");
                            output = (_output_9 + _plus_21);
                            for (int i = 0; (i < (fdt.getUseAgent().size() - 1)); i++) {
                              String _output_10 = output;
                              String _name_17 = fdt.getUseAgent().get(i).getName();
                              String _plus_22 = (_name_17 + ", ");
                              output = (_output_10 + _plus_22);
                            }
                            String _output_10 = output;
                            EList<Agent> _useAgent = fdt.getUseAgent();
                            int _size_2 = fdt.getUseAgent().size();
                            int _minus_2 = (_size_2 - 1);
                            String _name_17 = _useAgent.get(_minus_2).getName();
                            String _plus_22 = (_name_17 + "> ");
                            String _name_18 = fdt.getName();
                            String _plus_23 = (_plus_22 + _name_18);
                            output = (_output_10 + _plus_23);
                          } else {
                            if (((fdt.getUseEnv() != null) && (fdt.getUseEnv().size() > 0))) {
                              String _output_11 = output;
                              String _name_19 = fdt.getObj().getName();
                              String _plus_24 = (_name_19 + "<");
                              output = (_output_11 + _plus_24);
                              for (int i = 0; (i < (fdt.getUseEnv().size() - 1)); i++) {
                                String _output_12 = output;
                                String _name_20 = fdt.getUseEnv().get(i).getName();
                                String _plus_25 = (_name_20 + ", ");
                                output = (_output_12 + _plus_25);
                              }
                              String _output_12 = output;
                              EList<Environment> _useEnv = fdt.getUseEnv();
                              int _size_3 = fdt.getUseEnv().size();
                              int _minus_3 = (_size_3 - 1);
                              String _name_20 = _useEnv.get(_minus_3).getName();
                              String _plus_25 = (_name_20 + "> ");
                              String _name_21 = fdt.getName();
                              String _plus_26 = (_plus_25 + _name_21);
                              output = (_output_12 + _plus_26);
                            } else {
                              String _output_13 = output;
                              String _name_22 = fdt.getObj().getName();
                              String _plus_27 = (_name_22 + " ");
                              String _name_23 = fdt.getName();
                              String _plus_28 = (_plus_27 + _name_23);
                              output = (_output_13 + _plus_28);
                            }
                          }
                        }
                      }
                      String _output_14 = output;
                      Object _printExpression_2 = Printers.printExpression(fdt.getExpr(), fdt.getName());
                      String _plus_29 = (" = " + _printExpression_2);
                      _xblockexpression_3 = output = (_output_14 + _plus_29);
                    }
                    _xifexpression_9 = _xblockexpression_3;
                  } else {
                    String _xifexpression_10 = null;
                    if (((fdt.getUseObj() != null) && (fdt.getUseObj().size() > 0))) {
                      String _xblockexpression_4 = null;
                      {
                        String _output_5 = output;
                        String _name_10 = fdt.getObj().getName();
                        String _plus_15 = (_name_10 + "<");
                        output = (_output_5 + _plus_15);
                        for (int i = 0; (i < (fdt.getUseObj().size() - 1)); i++) {
                          String _output_6 = output;
                          String _name_11 = fdt.getUseObj().get(i).getName();
                          String _plus_16 = (_name_11 + ", ");
                          output = (_output_6 + _plus_16);
                        }
                        String _output_6 = output;
                        EList<NonPrimitiveType> _useObj = fdt.getUseObj();
                        int _size = fdt.getUseObj().size();
                        int _minus = (_size - 1);
                        String _name_11 = _useObj.get(_minus).getName();
                        output = (_output_6 + _name_11);
                        String _output_7 = output;
                        String _name_12 = fdt.getName();
                        String _plus_16 = ("> " + _name_12);
                        String _plus_17 = (_plus_16 + " = new ");
                        String _name_13 = fdt.getObj().getName();
                        String _plus_18 = (_plus_17 + _name_13);
                        String _plus_19 = (_plus_18 + "<");
                        output = (_output_7 + _plus_19);
                        for (int i = 0; (i < (fdt.getUseObj().size() - 1)); i++) {
                          String _output_8 = output;
                          String _name_14 = fdt.getUseObj().get(i).getName();
                          String _plus_20 = (_name_14 + ", ");
                          output = (_output_8 + _plus_20);
                        }
                        String _output_8 = output;
                        EList<NonPrimitiveType> _useObj_1 = fdt.getUseObj();
                        int _size_1 = fdt.getUseObj().size();
                        int _minus_1 = (_size_1 - 1);
                        String _name_14 = _useObj_1.get(_minus_1).getName();
                        output = (_output_8 + _name_14);
                        String _output_9 = output;
                        _xblockexpression_4 = output = (_output_9 + ">()");
                      }
                      _xifexpression_10 = _xblockexpression_4;
                    } else {
                      String _xifexpression_11 = null;
                      if (((fdt.getUseGroup() != null) && (fdt.getUseGroup().size() > 0))) {
                        String _xblockexpression_5 = null;
                        {
                          String _output_5 = output;
                          String _name_10 = fdt.getObj().getName();
                          String _plus_15 = (_name_10 + "<");
                          output = (_output_5 + _plus_15);
                          for (int i = 0; (i < (fdt.getUseGroup().size() - 1)); i++) {
                            String _output_6 = output;
                            String _firstUpper = StringExtensions.toFirstUpper(fdt.getUseGroup().get(i).getName());
                            String _plus_16 = (_firstUpper + ", ");
                            output = (_output_6 + _plus_16);
                          }
                          String _output_6 = output;
                          EList<Group> _useGroup = fdt.getUseGroup();
                          int _size = fdt.getUseGroup().size();
                          int _minus = (_size - 1);
                          String _firstUpper = StringExtensions.toFirstUpper(_useGroup.get(_minus).getName());
                          output = (_output_6 + _firstUpper);
                          String _output_7 = output;
                          String _name_11 = fdt.getName();
                          String _plus_16 = ("> " + _name_11);
                          String _plus_17 = (_plus_16 + " = new ");
                          String _name_12 = fdt.getObj().getName();
                          String _plus_18 = (_plus_17 + _name_12);
                          String _plus_19 = (_plus_18 + "<");
                          output = (_output_7 + _plus_19);
                          for (int i = 0; (i < (fdt.getUseGroup().size() - 1)); i++) {
                            String _output_8 = output;
                            String _firstUpper_1 = StringExtensions.toFirstUpper(fdt.getUseGroup().get(i).getName());
                            String _plus_20 = (_firstUpper_1 + ", ");
                            output = (_output_8 + _plus_20);
                          }
                          String _output_8 = output;
                          EList<Group> _useGroup_1 = fdt.getUseGroup();
                          int _size_1 = fdt.getUseGroup().size();
                          int _minus_1 = (_size_1 - 1);
                          String _firstUpper_1 = StringExtensions.toFirstUpper(_useGroup_1.get(_minus_1).getName());
                          output = (_output_8 + _firstUpper_1);
                          String _output_9 = output;
                          _xblockexpression_5 = output = (_output_9 + ">()");
                        }
                        _xifexpression_11 = _xblockexpression_5;
                      } else {
                        String _xifexpression_12 = null;
                        if (((fdt.getUseAgent() != null) && (fdt.getUseAgent().size() > 0))) {
                          String _xblockexpression_6 = null;
                          {
                            String _output_5 = output;
                            String _name_10 = fdt.getObj().getName();
                            String _plus_15 = (_name_10 + "<");
                            output = (_output_5 + _plus_15);
                            for (int i = 0; (i < (fdt.getUseAgent().size() - 1)); i++) {
                              String _output_6 = output;
                              String _firstUpper = StringExtensions.toFirstUpper(fdt.getUseAgent().get(i).getName());
                              String _plus_16 = (_firstUpper + ", ");
                              output = (_output_6 + _plus_16);
                            }
                            String _output_6 = output;
                            EList<Agent> _useAgent = fdt.getUseAgent();
                            int _size = fdt.getUseAgent().size();
                            int _minus = (_size - 1);
                            String _firstUpper = StringExtensions.toFirstUpper(_useAgent.get(_minus).getName());
                            output = (_output_6 + _firstUpper);
                            String _output_7 = output;
                            String _name_11 = fdt.getName();
                            String _plus_16 = ("> " + _name_11);
                            String _plus_17 = (_plus_16 + " = new ");
                            String _name_12 = fdt.getObj().getName();
                            String _plus_18 = (_plus_17 + _name_12);
                            String _plus_19 = (_plus_18 + "<");
                            output = (_output_7 + _plus_19);
                            for (int i = 0; (i < (fdt.getUseAgent().size() - 1)); i++) {
                              String _output_8 = output;
                              String _firstUpper_1 = StringExtensions.toFirstUpper(fdt.getUseAgent().get(i).getName());
                              String _plus_20 = (_firstUpper_1 + ", ");
                              output = (_output_8 + _plus_20);
                            }
                            String _output_8 = output;
                            EList<Agent> _useAgent_1 = fdt.getUseAgent();
                            int _size_1 = fdt.getUseAgent().size();
                            int _minus_1 = (_size_1 - 1);
                            String _firstUpper_1 = StringExtensions.toFirstUpper(_useAgent_1.get(_minus_1).getName());
                            output = (_output_8 + _firstUpper_1);
                            String _output_9 = output;
                            _xblockexpression_6 = output = (_output_9 + ">()");
                          }
                          _xifexpression_12 = _xblockexpression_6;
                        } else {
                          String _xifexpression_13 = null;
                          if (((fdt.getUseEnv() != null) && (fdt.getUseEnv().size() > 0))) {
                            String _xblockexpression_7 = null;
                            {
                              String _output_5 = output;
                              String _name_10 = fdt.getObj().getName();
                              String _plus_15 = (_name_10 + "<");
                              output = (_output_5 + _plus_15);
                              for (int i = 0; (i < (fdt.getUseEnv().size() - 1)); i++) {
                                String _output_6 = output;
                                String _firstUpper = StringExtensions.toFirstUpper(fdt.getUseEnv().get(i).getName());
                                String _plus_16 = (_firstUpper + ", ");
                                output = (_output_6 + _plus_16);
                              }
                              String _output_6 = output;
                              EList<Environment> _useEnv = fdt.getUseEnv();
                              int _size = fdt.getUseEnv().size();
                              int _minus = (_size - 1);
                              String _firstUpper = StringExtensions.toFirstUpper(_useEnv.get(_minus).getName());
                              output = (_output_6 + _firstUpper);
                              String _output_7 = output;
                              String _name_11 = fdt.getName();
                              String _plus_16 = ("> " + _name_11);
                              String _plus_17 = (_plus_16 + " = new ");
                              String _name_12 = fdt.getObj().getName();
                              String _plus_18 = (_plus_17 + _name_12);
                              String _plus_19 = (_plus_18 + "<");
                              output = (_output_7 + _plus_19);
                              for (int i = 0; (i < (fdt.getUseEnv().size() - 1)); i++) {
                                String _output_8 = output;
                                String _firstUpper_1 = StringExtensions.toFirstUpper(fdt.getUseEnv().get(i).getName());
                                String _plus_20 = (_firstUpper_1 + ", ");
                                output = (_output_8 + _plus_20);
                              }
                              String _output_8 = output;
                              EList<Environment> _useEnv_1 = fdt.getUseEnv();
                              int _size_1 = fdt.getUseEnv().size();
                              int _minus_1 = (_size_1 - 1);
                              String _firstUpper_1 = StringExtensions.toFirstUpper(_useEnv_1.get(_minus_1).getName());
                              output = (_output_8 + _firstUpper_1);
                              String _output_9 = output;
                              _xblockexpression_7 = output = (_output_9 + ">()");
                            }
                            _xifexpression_13 = _xblockexpression_7;
                          } else {
                            String _output_5 = output;
                            String _name_10 = fdt.getObj().getName();
                            String _plus_15 = (_name_10 + " ");
                            String _name_11 = fdt.getName();
                            String _plus_16 = (_plus_15 + _name_11);
                            String _plus_17 = (_plus_16 + " = new ");
                            String _name_12 = fdt.getObj().getName();
                            String _plus_18 = (_plus_17 + _name_12);
                            String _plus_19 = (_plus_18 + "()");
                            _xifexpression_13 = output = (_output_5 + _plus_19);
                          }
                          _xifexpression_12 = _xifexpression_13;
                        }
                        _xifexpression_11 = _xifexpression_12;
                      }
                      _xifexpression_10 = _xifexpression_11;
                    }
                    _xifexpression_9 = _xifexpression_10;
                  }
                  _xifexpression_8 = _xifexpression_9;
                }
                _xifexpression_5 = _xifexpression_8;
              }
              _xifexpression_4 = _xifexpression_5;
            }
            _xifexpression_1 = _xifexpression_4;
          }
          _xblockexpression_1 = _xifexpression_1;
        }
        _xifexpression = _xblockexpression_1;
      } else {
        String _xifexpression_1 = null;
        Symbol _agentFieldRef = f.getAgentFieldRef();
        boolean _tripleNotEquals_1 = (_agentFieldRef != null);
        if (_tripleNotEquals_1) {
          String _xblockexpression_2 = null;
          {
            Symbol _agentFieldRef_1 = f.getAgentFieldRef();
            final AgentFieldReference afr = ((AgentFieldReference) _agentFieldRef_1);
            String _output = output;
            String _firstUpper = StringExtensions.toFirstUpper(afr.getAgent().getName());
            String _plus = (_firstUpper + " ");
            String _name = afr.getName();
            String _plus_1 = (_plus + _name);
            output = (_output + _plus_1);
            Expression _assignment = afr.getAssignment();
            boolean _tripleNotEquals_2 = (_assignment != null);
            if (_tripleNotEquals_2) {
              String _output_1 = output;
              Object _printExpression = Printers.printExpression(afr.getAssignment());
              String _plus_2 = (" = " + _printExpression);
              output = (_output_1 + _plus_2);
            }
            String _output_2 = output;
            _xblockexpression_2 = output = (_output_2 + ";");
          }
          _xifexpression_1 = _xblockexpression_2;
        } else {
          String _xifexpression_2 = null;
          Symbol _envFieldRef = f.getEnvFieldRef();
          boolean _tripleNotEquals_2 = (_envFieldRef != null);
          if (_tripleNotEquals_2) {
            String _xblockexpression_3 = null;
            {
              Symbol _envFieldRef_1 = f.getEnvFieldRef();
              final EnvironmentFieldReference efr = ((EnvironmentFieldReference) _envFieldRef_1);
              String _output = output;
              String _firstUpper = StringExtensions.toFirstUpper(efr.getEnv().getName());
              String _plus = (_firstUpper + " ");
              String _name = efr.getName();
              String _plus_1 = (_plus + _name);
              output = (_output + _plus_1);
              Expression _assignment = efr.getAssignment();
              boolean _tripleNotEquals_3 = (_assignment != null);
              if (_tripleNotEquals_3) {
                String _output_1 = output;
                Object _printExpression = Printers.printExpression(efr.getAssignment());
                String _plus_2 = (" = " + _printExpression);
                output = (_output_1 + _plus_2);
              }
              String _output_2 = output;
              _xblockexpression_3 = output = (_output_2 + ";");
            }
            _xifexpression_2 = _xblockexpression_3;
          } else {
            String _xifexpression_3 = null;
            Symbol _grpFieldRef = f.getGrpFieldRef();
            boolean _tripleNotEquals_3 = (_grpFieldRef != null);
            if (_tripleNotEquals_3) {
              String _xblockexpression_4 = null;
              {
                Symbol _grpFieldRef_1 = f.getGrpFieldRef();
                final GroupFieldReference gfr = ((GroupFieldReference) _grpFieldRef_1);
                String _output = output;
                String _firstUpper = StringExtensions.toFirstUpper(gfr.getGrp().getName());
                String _plus = (_firstUpper + " ");
                String _name = gfr.getName();
                String _plus_1 = (_plus + _name);
                output = (_output + _plus_1);
                Expression _assignment = gfr.getAssignment();
                boolean _tripleNotEquals_4 = (_assignment != null);
                if (_tripleNotEquals_4) {
                  String _output_1 = output;
                  Object _printExpression = Printers.printExpression(gfr.getAssignment());
                  String _plus_2 = (" = " + _printExpression);
                  output = (_output_1 + _plus_2);
                }
                String _output_2 = output;
                _xblockexpression_4 = output = (_output_2 + ";");
              }
              _xifexpression_3 = _xblockexpression_4;
            }
            _xifexpression_2 = _xifexpression_3;
          }
          _xifexpression_1 = _xifexpression_2;
        }
        _xifexpression = _xifexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public static String autoPrinter(final EObject expr) {
    if ((expr instanceof Expression)) {
      return Printers.printExpression(expr).toString();
    } else {
      if ((expr instanceof Formula)) {
        return HelperFunctions.printFormula(((Formula) expr));
      } else {
        if ((expr instanceof SelfAssignedFormula)) {
          return HelperFunctions.printSelfAssignedFormula(((SelfAssignedFormula) expr));
        } else {
          if ((expr instanceof Field)) {
            return Printers.printFieldDeclarations(((Field) expr));
          } else {
            return expr.toString();
          }
        }
      }
    }
  }
  
  public static String printForLoop(final ForLoop loop) {
    String output = "";
    String _output = output;
    String _autoPrinter = Printers.autoPrinter(loop.getInit());
    String _plus = ("for (" + _autoPrinter);
    String _plus_1 = (_plus + "; ");
    Object _printExpression = Printers.printExpression(loop.getCondition());
    String _plus_2 = (_plus_1 + _printExpression);
    String _plus_3 = (_plus_2 + ";");
    String _autoPrinter_1 = Printers.autoPrinter(loop.getShifter());
    String _plus_4 = (_plus_3 + _autoPrinter_1);
    String _plus_5 = (_plus_4 + ") {\n");
    output = (_output + _plus_5);
    EList<EObject> _body = loop.getBody();
    for (final EObject expr : _body) {
      String _output_1 = output;
      String _autoPrinter_2 = Printers.autoPrinter(expr);
      String _plus_6 = ("\t\t" + _autoPrinter_2);
      String _plus_7 = (_plus_6 + ";\n");
      output = (_output_1 + _plus_7);
    }
    String _output_2 = output;
    output = (_output_2 + "\t\t\n}\n");
    return output;
  }
  
  public static Object printExpression(final EObject expr) {
    CharSequence _xifexpression = null;
    if ((expr instanceof Expression)) {
      CharSequence _xifexpression_1 = null;
      if ((expr instanceof SelfCallExpr)) {
        return HelperFunctions.printSelfCall(((SelfCallExpr) expr));
      } else {
        CharSequence _xifexpression_2 = null;
        if ((expr instanceof NumberLiteral)) {
          return ((NumberLiteral) expr).getValue();
        } else {
          CharSequence _xifexpression_3 = null;
          if ((expr instanceof BooleanType)) {
            return Boolean.valueOf(((BooleanType) expr).isBool());
          } else {
            CharSequence _xifexpression_4 = null;
            if ((expr instanceof SystemCallObj)) {
              String _replaceAll = Helpers.getSystemName().replaceAll(" ", "");
              String _plus = (_replaceAll + ".get");
              String _firstUpper = StringExtensions.toFirstUpper(((SystemCallObj) expr).getSysCall().getCall());
              String _plus_1 = (_plus + _firstUpper);
              return (_plus_1 + "_()");
            } else {
              CharSequence _xifexpression_5 = null;
              if ((expr instanceof StringLiteral)) {
                String _value = ((StringLiteral) expr).getValue();
                String _plus_2 = ("\"" + _value);
                return (_plus_2 + "\"");
              } else {
                CharSequence _xifexpression_6 = null;
                if ((expr instanceof TypeRef)) {
                  return ((TypeRef) expr).getType().getName();
                } else {
                  CharSequence _xifexpression_7 = null;
                  if ((expr instanceof FeatureCallExp)) {
                    return FeatureCallGenerator.printFeatureCall(((FeatureCallExp) expr).getFunc());
                  } else {
                    CharSequence _xifexpression_8 = null;
                    if ((expr instanceof FeatureCall)) {
                      return FeatureCallGenerator.printFeatureCall(((FeatureCall) expr));
                    } else {
                      CharSequence _xifexpression_9 = null;
                      if ((expr instanceof IfStatement)) {
                        return Printers.printIfStatement(((IfStatement) expr));
                      } else {
                        CharSequence _xifexpression_10 = null;
                        if ((expr instanceof BooleanExpression)) {
                          StringConcatenation _builder = new StringConcatenation();
                          Object _printExpression = Printers.printExpression(((BooleanExpression) expr).getLeft());
                          _builder.append(_printExpression);
                          _builder.append(" ");
                          String _op = ((BooleanExpression) expr).getOp();
                          _builder.append(_op);
                          _builder.append(" ");
                          Object _printExpression_1 = Printers.printExpression(((BooleanExpression) expr).getRight());
                          _builder.append(_printExpression_1);
                          _xifexpression_10 = _builder;
                        } else {
                          CharSequence _xifexpression_11 = null;
                          if ((expr instanceof Comparison)) {
                            StringConcatenation _builder_1 = new StringConcatenation();
                            Object _printExpression_2 = Printers.printExpression(((Comparison) expr).getLeft());
                            _builder_1.append(_printExpression_2);
                            _builder_1.append(" ");
                            String _op_1 = ((Comparison) expr).getOp();
                            _builder_1.append(_op_1);
                            _builder_1.append(" ");
                            Object _printExpression_3 = Printers.printExpression(((Comparison) expr).getRight());
                            _builder_1.append(_printExpression_3);
                            _xifexpression_11 = _builder_1;
                          } else {
                            CharSequence _xifexpression_12 = null;
                            if ((expr instanceof Equals)) {
                              StringConcatenation _builder_2 = new StringConcatenation();
                              Object _printExpression_4 = Printers.printExpression(((Equals) expr).getLeft());
                              _builder_2.append(_printExpression_4);
                              _builder_2.append(" ");
                              String _op_2 = ((Equals) expr).getOp();
                              _builder_2.append(_op_2);
                              _builder_2.append(" ");
                              Object _printExpression_5 = Printers.printExpression(((Equals) expr).getRight());
                              _builder_2.append(_printExpression_5);
                              _xifexpression_12 = _builder_2;
                            } else {
                              CharSequence _xifexpression_13 = null;
                              if ((expr instanceof Addition)) {
                                StringConcatenation _builder_3 = new StringConcatenation();
                                Object _printExpression_6 = Printers.printExpression(((Addition) expr).getLeft());
                                _builder_3.append(_printExpression_6);
                                _builder_3.append(" ");
                                String _op_3 = ((Addition) expr).getOp();
                                _builder_3.append(_op_3);
                                _builder_3.append(" ");
                                Object _printExpression_7 = Printers.printExpression(((Addition) expr).getRight());
                                _builder_3.append(_printExpression_7);
                                _xifexpression_13 = _builder_3;
                              } else {
                                CharSequence _xifexpression_14 = null;
                                if ((expr instanceof Subtraction)) {
                                  StringConcatenation _builder_4 = new StringConcatenation();
                                  Object _printExpression_8 = Printers.printExpression(((Subtraction) expr).getLeft());
                                  _builder_4.append(_printExpression_8);
                                  _builder_4.append(" ");
                                  String _op_4 = ((Subtraction) expr).getOp();
                                  _builder_4.append(_op_4);
                                  _builder_4.append(" ");
                                  Object _printExpression_9 = Printers.printExpression(((Subtraction) expr).getRight());
                                  _builder_4.append(_printExpression_9);
                                  _xifexpression_14 = _builder_4;
                                } else {
                                  CharSequence _xifexpression_15 = null;
                                  if ((expr instanceof Multiplication)) {
                                    StringConcatenation _builder_5 = new StringConcatenation();
                                    Object _printExpression_10 = Printers.printExpression(((Multiplication) expr).getLeft());
                                    _builder_5.append(_printExpression_10);
                                    _builder_5.append(" ");
                                    String _op_5 = ((Multiplication) expr).getOp();
                                    _builder_5.append(_op_5);
                                    _builder_5.append(" ");
                                    Object _printExpression_11 = Printers.printExpression(((Multiplication) expr).getRight());
                                    _builder_5.append(_printExpression_11);
                                    _xifexpression_15 = _builder_5;
                                  } else {
                                    CharSequence _xifexpression_16 = null;
                                    if ((expr instanceof Div)) {
                                      StringConcatenation _builder_6 = new StringConcatenation();
                                      Object _printExpression_12 = Printers.printExpression(((Div) expr).getLeft());
                                      _builder_6.append(_printExpression_12);
                                      _builder_6.append(" ");
                                      String _op_6 = ((Div) expr).getOp();
                                      _builder_6.append(_op_6);
                                      _builder_6.append(" ");
                                      Object _printExpression_13 = Printers.printExpression(((Div) expr).getRight());
                                      _builder_6.append(_printExpression_13);
                                      _xifexpression_16 = _builder_6;
                                    } else {
                                      CharSequence _xifexpression_17 = null;
                                      if ((expr instanceof BooleanNegation)) {
                                        StringConcatenation _builder_7 = new StringConcatenation();
                                        _builder_7.append("!");
                                        Object _printExpression_14 = Printers.printExpression(((BooleanNegation) expr).getExpression());
                                        _builder_7.append(_printExpression_14);
                                        _xifexpression_17 = _builder_7;
                                      } else {
                                        CharSequence _xifexpression_18 = null;
                                        if ((expr instanceof ArithmeticSigned)) {
                                          StringConcatenation _builder_8 = new StringConcatenation();
                                          _builder_8.append("-");
                                          Object _printExpression_15 = Printers.printExpression(((ArithmeticSigned) expr).getExpression());
                                          _builder_8.append(_printExpression_15);
                                          _xifexpression_18 = _builder_8;
                                        } else {
                                          CharSequence _xifexpression_19 = null;
                                          if ((expr instanceof MacroCall)) {
                                            return MacroGenerator.parseMacro(((MacroCall) expr), null);
                                          } else {
                                            CharSequence _xifexpression_20 = null;
                                            if ((expr instanceof NullTypeLiteral)) {
                                              return "null";
                                            } else {
                                              CharSequence _xifexpression_21 = null;
                                              if ((expr instanceof FunctionCallExpr)) {
                                                return HelperFunctions.printFunctionCall(((FunctionCallExpr) expr).getFuncCall());
                                              } else {
                                                CharSequence _xifexpression_22 = null;
                                                if ((expr instanceof EnumCallExpr)) {
                                                  StringConcatenation _builder_9 = new StringConcatenation();
                                                  String _name = ((EnumCallExpr) expr).getEnumCall().getEn().getName();
                                                  _builder_9.append(_name);
                                                  _builder_9.append(".");
                                                  String _name_1 = ((EnumCallExpr) expr).getEnumCall().getEntype().getName();
                                                  _builder_9.append(_name_1);
                                                  _xifexpression_22 = _builder_9;
                                                } else {
                                                  CharSequence _xifexpression_23 = null;
                                                  if ((expr instanceof Agent_Call)) {
                                                    String _name_2 = ((Agent_Call) expr).getAgentCall().getAgent().getName();
                                                    return (_name_2 + ".class");
                                                  } else {
                                                    CharSequence _xifexpression_24 = null;
                                                    if ((expr instanceof Environment_Call)) {
                                                      String _name_3 = ((Environment_Call) expr).getEnvironmentCall().getEnv().getName();
                                                      return (_name_3 + ".class");
                                                    } else {
                                                      CharSequence _xifexpression_25 = null;
                                                      if ((expr instanceof Group_Call)) {
                                                        String _name_4 = ((Group_Call) expr).getGroupCall().getGrp().getName();
                                                        return (_name_4 + ".class");
                                                      } else {
                                                        CharSequence _xifexpression_26 = null;
                                                        if ((expr instanceof ForLoop)) {
                                                          return Printers.printForLoop(((ForLoop) expr));
                                                        } else {
                                                          CharSequence _xifexpression_27 = null;
                                                          if ((expr instanceof ForEachLoop)) {
                                                            return Printers.printForEachLoop(((ForEachLoop) expr));
                                                          } else {
                                                            CharSequence _xifexpression_28 = null;
                                                            if ((expr instanceof ForKeywords)) {
                                                              StringConcatenation _builder_10 = new StringConcatenation();
                                                              ForKeywords _forWords = ((ForKeywords)expr).getForWords();
                                                              String _k = ((ForKeywords) _forWords).getK();
                                                              _builder_10.append(_k);
                                                              _xifexpression_28 = _builder_10;
                                                            } else {
                                                              StringConcatenation _builder_11 = new StringConcatenation();
                                                              _builder_11.append("ERROR: Unknown expression");
                                                              _xifexpression_28 = _builder_11;
                                                            }
                                                            _xifexpression_27 = _xifexpression_28;
                                                          }
                                                          _xifexpression_26 = _xifexpression_27;
                                                        }
                                                        _xifexpression_25 = _xifexpression_26;
                                                      }
                                                      _xifexpression_24 = _xifexpression_25;
                                                    }
                                                    _xifexpression_23 = _xifexpression_24;
                                                  }
                                                  _xifexpression_22 = _xifexpression_23;
                                                }
                                                _xifexpression_21 = _xifexpression_22;
                                              }
                                              _xifexpression_20 = _xifexpression_21;
                                            }
                                            _xifexpression_19 = _xifexpression_20;
                                          }
                                          _xifexpression_18 = _xifexpression_19;
                                        }
                                        _xifexpression_17 = _xifexpression_18;
                                      }
                                      _xifexpression_16 = _xifexpression_17;
                                    }
                                    _xifexpression_15 = _xifexpression_16;
                                  }
                                  _xifexpression_14 = _xifexpression_15;
                                }
                                _xifexpression_13 = _xifexpression_14;
                              }
                              _xifexpression_12 = _xifexpression_13;
                            }
                            _xifexpression_11 = _xifexpression_12;
                          }
                          _xifexpression_10 = _xifexpression_11;
                        }
                        _xifexpression_9 = _xifexpression_10;
                      }
                      _xifexpression_8 = _xifexpression_9;
                    }
                    _xifexpression_7 = _xifexpression_8;
                  }
                  _xifexpression_6 = _xifexpression_7;
                }
                _xifexpression_5 = _xifexpression_6;
              }
              _xifexpression_4 = _xifexpression_5;
            }
            _xifexpression_3 = _xifexpression_4;
          }
          _xifexpression_2 = _xifexpression_3;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public static Object printExpression(final Expression expr, final String name) {
    Object _xifexpression = null;
    if ((expr instanceof MacroCall)) {
      return MacroGenerator.parseMacro(((MacroCall) expr), name);
    } else {
      _xifexpression = Printers.printExpression(expr);
    }
    return _xifexpression;
  }
  
  public static String printForEachLoop(final ForEachLoop loop) {
    String output = "";
    String _output = output;
    String _ty = loop.getTy();
    String _plus = ("for (" + _ty);
    String _plus_1 = (_plus + " ");
    String _name = loop.getItem().getName();
    String _plus_2 = (_plus_1 + _name);
    String _plus_3 = (_plus_2 + " : ");
    Object _printExpression = Printers.printExpression(loop.getList());
    String _plus_4 = (_plus_3 + _printExpression);
    String _plus_5 = (_plus_4 + ") {\n");
    output = (_output + _plus_5);
    EList<EObject> _body = loop.getBody();
    for (final EObject expr : _body) {
      String _output_1 = output;
      String _autoPrinter = Printers.autoPrinter(expr);
      String _plus_6 = ("\t\t" + _autoPrinter);
      String _plus_7 = (_plus_6 + ";\n");
      output = (_output_1 + _plus_7);
    }
    String _output_2 = output;
    output = (_output_2 + "\t}\n");
    return output;
  }
  
  public static String printIfStatement(final IfStatement iff, final int depth, final boolean returns) {
    String output = "";
    String TABS = Constants.TAB;
    for (int i = 0; (i < depth); i++) {
      String _TABS = TABS;
      TABS = (_TABS + Constants.TAB);
    }
    String _output = output;
    Object _printExpression = Printers.printExpression(iff.getCondition());
    String _plus = ("if (" + _printExpression);
    String _plus_1 = (_plus + ") {\n");
    output = (_output + _plus_1);
    int _size = iff.getThen().size();
    ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _size, true);
    for (final Integer i : _doubleDotLessThan) {
      {
        EObject obj = iff.getThen().get((i).intValue());
        if ((returns && ((i).intValue() == (iff.getThen().size() - 1)))) {
          if ((obj instanceof IfStatement)) {
            String _output_1 = output;
            String _printIfStatement = Printers.printIfStatement(((IfStatement) obj), (depth + 1), true);
            String _plus_2 = (TABS + _printIfStatement);
            output = (_output_1 + _plus_2);
          } else {
            String _output_2 = output;
            String _autoPrinter = Printers.autoPrinter(obj);
            String _plus_3 = ((TABS + "return ") + _autoPrinter);
            String _plus_4 = (_plus_3 + Constants.SC);
            String _plus_5 = (_plus_4 + Constants.NL);
            output = (_output_2 + _plus_5);
          }
        } else {
          String _output_3 = output;
          String _autoPrinter_1 = Printers.autoPrinter(obj);
          String _plus_6 = (TABS + _autoPrinter_1);
          String _plus_7 = (_plus_6 + Constants.SC);
          String _plus_8 = (_plus_7 + Constants.NL);
          output = (_output_3 + _plus_8);
        }
      }
    }
    String _output_1 = output;
    output = (_output_1 + "}");
    EList<ElseIfExpr> _elseifexpr = iff.getElseifexpr();
    boolean _tripleNotEquals = (_elseifexpr != null);
    if (_tripleNotEquals) {
      EList<ElseIfExpr> _elseifexpr_1 = iff.getElseifexpr();
      for (final ElseIfExpr cond : _elseifexpr_1) {
        {
          String _output_2 = output;
          Object _printExpression_1 = Printers.printExpression(cond.getElseifCond());
          String _plus_2 = (" else if (" + _printExpression_1);
          String _plus_3 = (_plus_2 + ") {\n");
          output = (_output_2 + _plus_3);
          int _size_1 = cond.getElseifthen().size();
          ExclusiveRange _doubleDotLessThan_1 = new ExclusiveRange(0, _size_1, true);
          for (final Integer i_1 : _doubleDotLessThan_1) {
            {
              EObject obj = cond.getElseifthen().get((i_1).intValue());
              if ((returns && ((i_1).intValue() == (cond.getElseifthen().size() - 1)))) {
                if ((obj instanceof IfStatement)) {
                  String _output_3 = output;
                  String _printIfStatement = Printers.printIfStatement(((IfStatement) obj), (depth + 1), true);
                  String _plus_4 = (TABS + _printIfStatement);
                  output = (_output_3 + _plus_4);
                } else {
                  String _output_4 = output;
                  String _autoPrinter = Printers.autoPrinter(obj);
                  String _plus_5 = ((TABS + "return ") + _autoPrinter);
                  String _plus_6 = (_plus_5 + Constants.SC);
                  String _plus_7 = (_plus_6 + Constants.NL);
                  output = (_output_4 + _plus_7);
                }
              } else {
                String _output_5 = output;
                String _autoPrinter_1 = Printers.autoPrinter(obj);
                String _plus_8 = (TABS + _autoPrinter_1);
                String _plus_9 = (_plus_8 + Constants.SC);
                String _plus_10 = (_plus_9 + Constants.NL);
                output = (_output_5 + _plus_10);
              }
            }
          }
          String _output_3 = output;
          output = (_output_3 + (TABS + "}"));
        }
      }
    }
    boolean _isEmpty = iff.getElseexp().isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      String _output_2 = output;
      output = (_output_2 + " else {\n");
      int _size_1 = iff.getElseexp().size();
      ExclusiveRange _doubleDotLessThan_1 = new ExclusiveRange(0, _size_1, true);
      for (final Integer i_1 : _doubleDotLessThan_1) {
        {
          EObject obj = iff.getElseexp().get((i_1).intValue());
          if ((returns && ((i_1).intValue() == (iff.getElseexp().size() - 1)))) {
            if ((obj instanceof IfStatement)) {
              String _output_3 = output;
              String _printIfStatement = Printers.printIfStatement(((IfStatement) obj), (depth + 1), true);
              output = (_output_3 + _printIfStatement);
            } else {
              String _output_4 = output;
              String _autoPrinter = Printers.autoPrinter(obj);
              String _plus_2 = ((TABS + "return ") + _autoPrinter);
              String _plus_3 = (_plus_2 + Constants.SC);
              String _plus_4 = (_plus_3 + Constants.NL);
              output = (_output_4 + _plus_4);
            }
          } else {
            String _output_5 = output;
            String _autoPrinter_1 = Printers.autoPrinter(obj);
            String _plus_5 = (TABS + _autoPrinter_1);
            String _plus_6 = (_plus_5 + Constants.SC);
            String _plus_7 = (_plus_6 + Constants.NL);
            output = (_output_5 + _plus_7);
          }
        }
      }
      String _output_3 = output;
      output = (_output_3 + "}");
    }
    return output;
  }
  
  public static String printIfStatement(final IfStatement is) {
    return Printers.printIfStatement(is, 1, false);
  }
}
