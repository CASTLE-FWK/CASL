/*
 * generated by Xtext
 */
package uofa.lbirdsey.castle.validation

import java.util.List
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.validation.Check
import org.eclipse.xtext.validation.ComposedChecks
import uofa.lbirdsey.castle.casl.Agent
import uofa.lbirdsey.castle.casl.CAS_Semantic_Group_Switch
import uofa.lbirdsey.castle.casl.CaslPackage
import uofa.lbirdsey.castle.casl.Entity
import uofa.lbirdsey.castle.casl.Environment
import uofa.lbirdsey.castle.casl.Field
import uofa.lbirdsey.castle.casl.Function
import uofa.lbirdsey.castle.casl.Group
import uofa.lbirdsey.castle.casl.System
import uofa.lbirdsey.castle.generator.semanticGroups.helpers.Constants
import uofa.lbirdsey.castle.generator.semanticGroups.helpers.HelperFunctions
import uofa.lbirdsey.castle.casl.Casl
import castleComponents.SemanticGroup
import java.util.HashSet

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
  
@ComposedChecks( validators = #[AgentValidator, GroupValidator, EnvironmentValidator, SystemValidator, FeatureValidator] )
public class CASLValidator extends AbstractCASLValidator {
	/****Global Checks ****/
	@Check
	def checkEntityNameStartsWithCapital(Entity ent) {
		if (!Character.isUpperCase(ent.getName().charAt(0))){
			CaslPackage::eINSTANCE.system_Cas_rules
			warning(ent.name+" name should begin with a capital letter",CaslPackage::eINSTANCE.entity_Name);
		}
	}
	
	@Check
	def checkGroupIsDefined(Entity ent, System sys){
		var sgActive = sys.cas_rules.semanticgroups == CAS_Semantic_Group_Switch.ENABLE;
		if (sgActive){
			//Count number of Groups defined
			//TODO
		}
	}
	
	/*****Function Checking *******/
	@Check
	def checkInitializeFunctionExists(Entity ent){
		var exists = false;
		var List<Function> functionList = null;
		var entClass = ent.name;
		if (ent instanceof Agent){
			var agt = ent as Agent;
			functionList = agt.agent_functions.functions
		} else if (ent instanceof Environment){
			var env = ent as Environment;
			functionList = env.env_functions.functions
		} else if (ent instanceof Group){
			var grp = ent as Group;
			functionList = grp.group_functions.functions
		}
		
		for (f : functionList) {
			var fn = f as Function		
			if ((fn.name as String).compareToIgnoreCase("initialize") == 0) {
				exists = true;
			}
		}
		
		if (!exists){
			error(entClass+" does not contain an initialize function",CaslPackage::eINSTANCE.entity_Name)
		}
	}
	
	//Check that each group and environment has LayoutParameters defined
	@Check
	def checkForLayoutParameterVariable(Entity ent){
		var List<EObject> fields; 
		 if (ent instanceof Environment){
			var env = ent as Environment;
			fields = env.env_parameters.fields;
		} else if (ent instanceof Group){
			var grp = ent as Group;
			fields = grp.group_parameters.fields;
		}
		var lpPresent = false;
		for (EObject f : fields){
			if (f instanceof Field){
				var fi = f as Field;
				if (HelperFunctions.getFieldName(fi as Field).equalsIgnoreCase(Constants.LAYOUT_PARAMETERS_NAME)){
					lpPresent = true;
				}
			}
		}
		if (!lpPresent){
			error(ent.name+" does not have "+Constants.LAYOUT_PARAMETERS_NAME+" defined in its parameters. ", CaslPackage::eINSTANCE.entity_Name);
		}
	}
	
	@Check
	def checkForLayoutParameterVariable(System s){
		var List<EObject> fields; 
		fields = s.system_parameters.fields;
		var lpPresent = false;
		for (EObject f : fields){
			if (f instanceof Field){
				var fi = f as Field;
				if (HelperFunctions.getFieldName(fi as Field).equalsIgnoreCase(Constants.LAYOUT_PARAMETERS_NAME)){
					lpPresent = true;
				}
			}
		}
		if (!lpPresent){
			error("The SYSTEM "+s.name+" does not have "+Constants.LAYOUT_PARAMETERS_NAME+" defined in its parameters. ", CaslPackage::eINSTANCE.system_System_parameters);
		}
		
	}
	
	@Check
	def checkForDuplicateNamedEntities(Casl c){
		var HashSet<String> allEntities = newHashSet();
		var List<Agent> allAgents = c.agents;
		var List<Environment> allEnvs = c.environments;
		var List<Group> allGrps = c.groups
		
		for (Agent a : allAgents){
			if (!allEntities.add(a.name)){
				error("The AGENT "+a.name+" has a taken name, please remove or rename.", CaslPackage::eINSTANCE.casl_Agents);
			}
		}
		
		for (Environment e : allEnvs){
			if (!allEntities.add(e.name)){
				error("The ENVIRONMENT "+e.name+" has a taken name, please remove or rename.", CaslPackage::eINSTANCE.casl_Environments);
			}
		}
		
		for (Group g : allGrps){
			if (!allEntities.add(g.name)){
				error("The GROUP "+g.name+" has a taken name, please remove or rename.", CaslPackage::eINSTANCE.casl_Groups);
			}
		}
			
	}
	//Check that the system has an actual name
	@Check
	def ensureSystemHasANonZeroName(System s){
		if (s.name.length <= 0){
			error("Please give the SYSTEM a name.", CaslPackage::eINSTANCE.system_Name)
		}
	}
	
	
	/*****Environment Checking *****/
}
