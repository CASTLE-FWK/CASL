/*
 * generated by Xtext
 */
package uofa.lbirdsey.castle.validation

import java.util.List
import org.eclipse.xtext.validation.Check
import org.eclipse.xtext.validation.ComposedChecks
import uofa.lbirdsey.castle.casl.Agent
import uofa.lbirdsey.castle.casl.CaslPackage
import uofa.lbirdsey.castle.casl.Entity
import uofa.lbirdsey.castle.casl.Environment
import uofa.lbirdsey.castle.casl.Function
import uofa.lbirdsey.castle.casl.Group
import uofa.lbirdsey.castle.casl.Behavior
import uofa.lbirdsey.castle.casl.Interaction
import uofa.lbirdsey.castle.casl.BehaviorType
import uofa.lbirdsey.castle.casl.InteractionFeatureCall
import uofa.lbirdsey.castle.casl.FeatureCall
import uofa.lbirdsey.castle.casl.System
import uofa.lbirdsey.castle.casl.CAS_Semantic_Group_Switch

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
  
@ComposedChecks( validators = #[AgentValidator, GroupValidator, EnvironmentValidator, SystemValidator] )
public class CASLValidator extends AbstractCASLValidator {
	/****Global Checks ****/
	@Check
	def checkEntityNameStartsWithCapital(Entity ent) {
		if (!Character.isUpperCase(ent.getName().charAt(0))){
			CaslPackage::eINSTANCE.system_Cas_rules
			warning(ent.name+" name should begin with a capital letter",CaslPackage::eINSTANCE.entity_Name);
		}
	}
	
	@Check
	def checkGroupIsDefined(Entity ent, System sys){
		var sgActive = sys.cas_rules.semanticgroups == CAS_Semantic_Group_Switch.ENABLE;
		if (sgActive){
			//Count number of Groups defined
			
		}
	}
	
	/*****Function Checking *******/
	@Check
	def checkInitializeFunctionExists(Entity ent){
		var exists = false;
		var List<Function> functionList = null;
		var entClass = ent.name;
		if (ent instanceof Agent){
			var agt = ent as Agent;
			functionList = agt.agent_functions.functions
		} else if (ent instanceof Environment){
			var env = ent as Environment;
			functionList = env.env_functions.functions
		} else if (ent instanceof Group){
			var grp = ent as Group;
			functionList = grp.group_functions.functions
		}
		
		for (f : functionList) {
			var fn = f as Function		
			if ((fn.name as String).compareToIgnoreCase("initialize") == 0) {
				exists = true;
			}
		}
		
		if (!exists){
			error(entClass+" does not contain an initialize function",CaslPackage::eINSTANCE.entity_Name)
		}
	}
	
	@Check
	def checkBehavior(Behavior behavior) {			
		var fn = behavior
		var behaviorBody = fn.body;
		for (bb : behaviorBody){
			//Do the infection type test
			if (bb instanceof FeatureCall){
				var beh = bb.fc;
				if (beh instanceof InteractionFeatureCall && fn.behavior_type == BehaviorType.SELF){
					//If contains an interaction trigger and is set to self, warn/error					
					error(fn.name+" contains an Interaction but Behavior Type is set to SELF. Change to AFFECT or remove Interaction", CaslPackage::eINSTANCE.behavior_Name)			
				} else if (!(beh instanceof InteractionFeatureCall) && !(fn.behavior_type == BehaviorType.SELF)){
					//If does not contains an interaction trigger and is set to self, warn/error
					error(fn.name+" is set to AFFECT but has no Interaction.", CaslPackage::eINSTANCE.behavior_Name)			
				}			
			} 
		}
	}

	//Interaction checks
	@Check
	def checkInteractions(Interaction inter){
		//Check that the Interaction actually COMMUNICATEs or QUERYs		
		
		val interBody = inter.body;
		for (ib : interBody){
			
		}
	}
	

	
	/*****Environment Checking *****/
}
