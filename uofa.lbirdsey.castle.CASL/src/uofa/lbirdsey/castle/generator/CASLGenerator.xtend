/*
 * generated by Xtext
 */
package uofa.lbirdsey.castle.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator2
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class CASLGenerator implements IGenerator2 {	
	
//	def zop() {}
//	@Inject extension IQualifiedNameProvider
//	String libraryName = "CaslLib" //This will do for now
//	
	
	override afterGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
		throw new UnsupportedOperationException("TODOccc: auto-generated method stub")
	}
	
	override beforeGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
		throw new UnsupportedOperationException("TODOaaa: auto-generated method stub")
	}
	
	override doGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
		throw new UnsupportedOperationException("TODObbb: auto-generated method stub")
	}
	
//		print("DOING NORMAL CASL GENERATION, NO REPAST")
//		//Process the SYSTEM
//		for(sys : resource.allContents.toIterable.filter(System)) {
//			fsa.generateFile(
//				sys.fullyQualifiedName.toString("/").replaceAll(" ","") + ".java", sys.compileSystem)
//		}
//		//Process the AGENTs
//		for(e : resource.allContents.toIterable.filter(Agent)) {
//			fsa.generateFile(
//				e.fullyQualifiedName.toString("/") + ".java", e.compileAgent)
//		}
//		
//		//Process the ENVIRONMENTS
//		for(e : resource.allContents.toIterable.filter(Environment)) {
//			fsa.generateFile(
//				e.fullyQualifiedName.toString("/") + ".java", e.compileEnvironment)
//		}
//		
//		//Create the library file
//		fsa.generateFile(libraryName+".java",compileCaslLib());
//		
//	}
//	
//	def compileSystem(System sys)'''
//		«generateSystemBuilder()»
//		public class «sys.name.replaceAll(" ","")» {
//			String name = "«sys.name»";
//			String description = "«sys.desc.replaceAll("\n","\"\n\t + \"")»";
//			
//			/*****Ruleset*****/
//			//Type
//			CAS_Rule_Types ruleType = CAS_Rule_Types.«sys.cas_rules.cas_rule.toString.toUpperCase»;
//			
//			//Checking
//			CAS_Rule_Checking ruleCheckType = CAS_Rule_Types.«sys.cas_rules.cas_check.toString.toUpperCase»;
//			
//			//Exceptions
//			«var i = 1»
//			«FOR e : sys.cas_rules.exceptions»
//			CAS_Rule_Exceptions ruleException«i» = CAS_Rule_Exceptions.«e.toString.toUpperCase»;
//			//«i = i + 1»
//			«ENDFOR»
//			
//			/*****Agent Types*****/
//			«FOR a: sys.agent_types.agent_types»
//			Agent «a.agent_type_name»;
//			«ENDFOR»
//			
//			/*****Environment Types Present*****/
//			«FOR env: sys.environment_types.environment_types»
//			Environment «env.environment_type_name»;
//			«ENDFOR»
//			
//			/*****System Parameters*****/
//			«sys.generateParameters()»
//			
//			/*****Termination Conditions*****/
//			
//		}
//	'''
//	
//	//This should really be subclass stuff in the System class
//	def compilePackage(Casl casl)'''
//	«FOR pkg : casl.packageElements»
//		«IF pkg instanceof Type»
//		«ENDIF»
//	«ENDFOR»
//	'''
//	
//	//Parse an AGENTs stuff and break it down
//	def compileAgent(Agent a) '''
//		«IF a.eContainer.fullyQualifiedName != null»
//			package «a.eContainer.fullyQualifiedName»;
//		«ENDIF»
//		«generateAgentBuilder()»
//		public class «a.name» {
//			/*Description: «a.desc»*/
//			
//			/*****«a.name.toFirstUpper» Parameters*****/
//			«a.generateParameters()»
//			
//			/*****«a.name.toFirstUpper» Functions*****/
//			«a.generateFunctions()»
//			
//			/*****«a.name.toFirstUpper» Behaviors*****/
//			«a.generateBehaviors()»
//			
//			/*****«a.name.toFirstUpper» Interactions*****/
//			«a.generateInteractions()»
//			
//			/*****«a.name.toFirstUpper» Adaptation*****/
//			«a.generateAdaptations()»
//				
//			/*****«a.name.toFirstUpper» Subsystems*****/
//			«a.generateSubsystems()»
//		}
//	'''
//	
//	def compileEnvironment(Environment env) '''
//		«IF env.eContainer.fullyQualifiedName != null»
//			package «env.eContainer.fullyQualifiedName»;
//		«ENDIF»
//		public class «env.name» {
//			/*Description: «env.desc»*/
//			«env.generateParameters()»
//			/*****«env.name.toFirstUpper» Functions*****/
//			«env.generateFunctions()»
//			
//			/*****«env.name.toFirstUpper» Behaviors*****/
//			«env.generateBehaviors()»
//			
//			/*****«env.name.toFirstUpper» Interactions*****/
//			«env.generateInteractions()»
//			
//			/*****«env.name.toFirstUpper» Adaptation*****/
//			«env.generateAdaptations()»
//				
//			/*****«env.name.toFirstUpper» Subsystems*****/
//			«env.generateSubsystems()»
//		}		
//	'''
//	
//	def compileCaslLib()'''
//		public class «libraryName» {
//			/*****CAS Rules*****/
//			public enum CAS_Rule_Types {
//				STRICT, LENIENT
//			}
//			public enum CAS_Rule_Checking {
//				STRONG, WEAK, NONE
//			}
//			public enum CAS_Rule_Exception {
//				MODULARITY, DIVERSITY, NONE
//			}
//		}
//	'''
//	
//	
//
//	
//	
////*********AGENT GENERATION********//
//	
//	def generateFunctions(Agent a) '''
//		«FOR function : a.agent_functions.functions»
//«««		need to do signature and return/params. then the body can be done (DAMN JAVA)
//		private «IF function.returnType != null»«function.returnType.type.name»«ELSE»void«ENDIF» «function.name»(«print(printFunctionParameters(function.functionParameters))») {
//			«IF function.returnType != null»«function.returnType.type.name» «function.returnType.name»;«ENDIF»
//			«FOR statement : function.body»
//				«IF statement instanceof Field»
//				«printOutFieldDeclarations(statement as Field)»;
//				«ELSEIF statement instanceof Function_Call»
//				«(statement as Function_Call).func.name»(THINGS TO PASS);
//				«ELSEIF statement instanceof Expression»
//				«printExpression(statement as Expression)»;
//				«ELSEIF statement instanceof Formula»
//				«(statement as Formula).sym.name» = «printExpression((statement as Formula).expr)»;
//				«ELSEIF statement instanceof SelfAssignedFormula»
//				this.«(statement as SelfAssignedFormula).ref.name» = «printExpression((statement as SelfAssignedFormula).expr)»;
//				«ENDIF»
//			«ENDFOR»
//			«IF function.returnType != null»return «function.returnType.name»;«ENDIF»
//		}
//		«ENDFOR»'''
//	
//		def generateParameters(Agent a) '''
//		//Fields
//		«FOR field : a.agent_parameters.fields»
//		«IF (field instanceof Field)»
//			private «printOutFieldDeclarations(field as Field)»;
//		«ELSEIF (field instanceof State_Block)»
//		«ENDIF»
//		«ENDFOR»
//		
//		//Getters & Setters
//		«FOR field : a.agent_parameters.fields»
//			«IF (field instanceof Field)»
//			public void set«field.declarations.name.toFirstUpper»(«field.declarations.type.name» «field.declarations.name»);
//			public «field.declarations.type.name» get«field.declarations.name.toFirstUpper»() {
//				return «field.declarations.name»;
//			}«ENDIF»
//		«ENDFOR»
//	'''
//		   
//	def generateBehaviors(Agent a) {	
//	'''
//		«FOR behavior : a.agent_behaviors.behaviors»
//		private void «behavior.name»(«print(printFunctionParameters(behavior.functionParameters))») {
//			«FOR statement : behavior.body»
//				«IF statement instanceof Field»
//				«printOutFieldDeclarations(statement as Field)»;
//				«ELSEIF statement instanceof Function_Call»
//				«(statement as Function_Call).func.name»(THINGS TO PASS);
//				«ELSEIF statement instanceof Expression»
//				«printExpression(statement as Expression)»;
//				«ELSEIF statement instanceof Formula»
//				«(statement as Formula).sym.name» = «printExpression((statement as Formula).expr)»;
//				«ELSEIF statement instanceof SelfAssignedFormula»
//				this.«(statement as SelfAssignedFormula).ref.name» = «printExpression((statement as SelfAssignedFormula).expr)»;
//				«ENDIF»
//			«ENDFOR»
//		}
//		«ENDFOR»		
//	'''}
//	
//		def generateInteractions(Agent a) {
//		var returnType = null'''
//		«FOR interaction : a.agent_interactions.interactions»
//		public «IF interaction.interaction_type == InteractionType.QUERY»void«ELSE»INFER«ENDIF» «interaction.name»(«printFunctionParameter(interaction.functionParameters as Function_Parameter)») {
//			«FOR statement : interaction.body»
//				«IF statement instanceof Field»
//				«printOutFieldDeclarations(statement as Field)»;
//				«ELSEIF statement instanceof Function_Call»
//				«(statement as Function_Call).func.name»(THINGS TO PASS);
//				«ELSEIF statement instanceof Expression»
//				«printExpression(statement as Expression)»;
//				«ELSEIF statement instanceof Formula»
//				«(statement as Formula).sym.name» = «printExpression((statement as Formula).expr)»;
//				«ELSEIF statement instanceof SelfAssignedFormula»
//				this.«(statement as SelfAssignedFormula).ref.name» = «printExpression((statement as SelfAssignedFormula).expr)»;
//				«ENDIF»
//			«ENDFOR»
//		}
//		«ENDFOR»		
//	'''}
//	
//	def generateAdaptations(Agent a) '''
//		«FOR adaptation : a.agent_adaptation.adaptation»
//«««		need to do signature and return/params. then the body can be done (DAMN JAVA)
//		private void «adaptation.name»(«print(printFunctionParameters(adaptation.functionParameters))») {
//			«FOR statement : adaptation.body»
//				«IF statement instanceof Field»
//				«printOutFieldDeclarations(statement as Field)»;
//				«ELSEIF statement instanceof Function_Call»
//				«(statement as Function_Call).func.name»(THINGS TO PASS);
//				«ELSEIF statement instanceof Expression»
//				«printExpression(statement as Expression)»;
//				«ELSEIF statement instanceof Formula»
//				«(statement as Formula).sym.name» = «printExpression((statement as Formula).expr)»;
//				«ELSEIF statement instanceof SelfAssignedFormula»
//				this.«(statement as SelfAssignedFormula).ref.name» = «printExpression((statement as SelfAssignedFormula).expr)»;
//				«ENDIF»
//			«ENDFOR»
//		}
//		«ENDFOR»		
//	'''
//	
//	def generateSubsystems(Agent a)'''
//		«FOR subsystem : a.agent_subSystems.subSystems»
//«««		need to do signature and return/params. then the body can be done (DAMN JAVA)
//		private void «subsystem.name»(«FOR fp : subsystem.functionParameters»«printFunctionParameter(fp as Function_Parameter)», «ENDFOR») {
//			«FOR statement : subsystem.body»
//				«IF statement instanceof Field»
//				«printOutFieldDeclarations(statement as Field)»;
//				«ELSEIF statement instanceof Function_Call»
//				«(statement as Function_Call).func.name»(THINGS TO PASS);
//				«ELSEIF statement instanceof Expression»
//				«printExpression(statement as Expression)»;
//				«ELSEIF statement instanceof Formula»
//				«(statement as Formula).sym.name» = «printExpression((statement as Formula).expr)»;
//				«ELSEIF statement instanceof SelfAssignedFormula»
//				this.«(statement as SelfAssignedFormula).ref.name» = «printExpression((statement as SelfAssignedFormula).expr)»;
//				«ENDIF»
//			«ENDFOR»
//		}
//		«ENDFOR»		
//	'''
//	
////************ENVIRONMENT GENERATION***********//
//	def generateParameters(Environment env) '''
//		//Fields
//		«FOR field : env.env_parameters.fields»
//		«IF (field instanceof Field)»
//			private «printOutFieldDeclarations(field as Field)»;
//		«ELSEIF (field instanceof State_Block)»
//		«ENDIF»
//		«ENDFOR»
//		
//		//Getters & Setters
//		«FOR field : env.env_parameters.fields»
//			«IF (field instanceof Field)»
//			public void set«field.declarations.name.toFirstUpper»(«field.declarations.type.name» «field.declarations.name»);
//			public «field.declarations.type.name» get«field.declarations.name.toFirstUpper»() {
//				return «field.declarations.name»;
//			}«ENDIF»
//		«ENDFOR»
//	'''
//	
//	def generateFunctions(Environment env) '''
//		«FOR function : env.env_functions.functions»
//«««		need to do signature and return/params. then the body can be done (DAMN JAVA)
//		private «IF function.returnType != null»«function.returnType.type.name»«ELSE»void«ENDIF» «function.name»(«FOR fp : function.functionParameters»«printFunctionParameter(fp as Function_Parameter)», «ENDFOR») {
//			«IF function.returnType != null»«function.returnType.type.name» «function.returnType.name»;«ENDIF»
//			«FOR statement : function.body»
//				«IF statement instanceof Field»
//				«printOutFieldDeclarations(statement as Field)»;
//				«ELSEIF statement instanceof Function_Call»
//				«(statement as Function_Call).func.name»(THINGS TO PASS);
//				«ELSEIF statement instanceof Expression»
//				«printExpression(statement as Expression)»;
//				«ELSEIF statement instanceof Formula»
//				«(statement as Formula).sym.name» = «printExpression((statement as Formula).expr)»;
//				«ELSEIF statement instanceof SelfAssignedFormula»
//				this.«(statement as SelfAssignedFormula).ref.name» = «printExpression((statement as SelfAssignedFormula).expr)»;
//				«ENDIF»
//			«ENDFOR»
//			«IF function.returnType != null»return «function.returnType.name»;«ENDIF»
//		}
//		«ENDFOR»'''	
//	
//	def generateBehaviors(Environment env)'''
//		«FOR behavior : env.env_behaviors.behaviors»
//«««		need to do signature and return/params. then the body can be done (DAMN JAVA)
//		private void «behavior.name»(«FOR fp : behavior.functionParameters»«printFunctionParameter(fp as Function_Parameter)», «ENDFOR») {
//			«FOR statement : behavior.body»
//				«IF statement instanceof Field»
//				«printOutFieldDeclarations(statement as Field)»;
//				«ELSEIF statement instanceof Function_Call»
//				«(statement as Function_Call).func.name»(THINGS TO PASS);
//				«ELSEIF statement instanceof Expression»
//				«printExpression(statement as Expression)»;
//				«ELSEIF statement instanceof Formula»
//				«(statement as Formula).sym.name» = «printExpression((statement as Formula).expr)»;
//				«ELSEIF statement instanceof SelfAssignedFormula»
//				this.«(statement as SelfAssignedFormula).ref.name» = «printExpression((statement as SelfAssignedFormula).expr)»;
//				«ENDIF»
//			«ENDFOR»
//		}
//		«ENDFOR»		
//	'''
//	
//		def generateInteractions(Environment env)'''
//		«FOR interaction : env.env_interactions.interactions»
//«««		need to do signature and return/params. then the body can be done (DAMN JAVA)
//		public INFER «interaction.name»(«printFunctionParameter(interaction.functionParameters as Function_Parameter)») {
//			«FOR statement : interaction.body»
//				«IF statement instanceof Field»
//				«printOutFieldDeclarations(statement as Field)»;
//				«ELSEIF statement instanceof Function_Call»
//				«(statement as Function_Call).func.name»(THINGS TO PASS);
//				«ELSEIF statement instanceof Expression»
//				«printExpression(statement as Expression)»;
//				«ELSEIF statement instanceof Formula»
//				«(statement as Formula).sym.name» = «printExpression((statement as Formula).expr)»;
//				«ELSEIF statement instanceof SelfAssignedFormula»
//				this.«(statement as SelfAssignedFormula).ref.name» = «printExpression((statement as SelfAssignedFormula).expr)»;
//				«ENDIF»
//			«ENDFOR»
//		}
//		«ENDFOR»		
//	'''
//	
//	def generateAdaptations(Environment env) '''
//		«FOR adaptation : env.env_adaptation.adaptation»
//«««		need to do signature and return/params. then the body can be done (DAMN JAVA)
//		private void «adaptation.name»(«FOR fp : adaptation.functionParameters»«printFunctionParameter(fp as Function_Parameter)», «ENDFOR») {
//			«FOR statement : adaptation.body»
//				«IF statement instanceof Field»
//				«printOutFieldDeclarations(statement as Field)»;
//				«ELSEIF statement instanceof Function_Call»
//				«(statement as Function_Call).func.name»(THINGS TO PASS);
//				«ELSEIF statement instanceof Expression»
//				«printExpression(statement as Expression)»;
//				«ELSEIF statement instanceof Formula»
//				«(statement as Formula).sym.name» = «printExpression((statement as Formula).expr)»;
//				«ELSEIF statement instanceof SelfAssignedFormula»
//				this.«(statement as SelfAssignedFormula).ref.name» = «printExpression((statement as SelfAssignedFormula).expr)»;
//				«ENDIF»
//			«ENDFOR»
//		}
//		«ENDFOR»		
//	'''
//	
//	def generateSubsystems(Environment env)'''
//		«FOR subsystem : env.env_subSystems.subSystems»
//«««		need to do signature and return/params. then the body can be done (DAMN JAVA)
//		private void «subsystem.name»(«FOR fp : subsystem.functionParameters»«printFunctionParameter(fp as Function_Parameter)», «ENDFOR») {
//			«FOR statement : subsystem.body»
//				«IF statement instanceof Field»
//				«printOutFieldDeclarations(statement as Field)»;
//				«ELSEIF statement instanceof Function_Call»
//				«(statement as Function_Call).func.name»(THINGS TO PASS);
//				«ELSEIF statement instanceof Expression»
//				«printExpression(statement as Expression)»;
//				«ELSEIF statement instanceof Formula»
//				«(statement as Formula).sym.name» = «printExpression((statement as Formula).expr)»;
//				«ELSEIF statement instanceof SelfAssignedFormula»
//				this.«(statement as SelfAssignedFormula).ref.name» = «printExpression((statement as SelfAssignedFormula).expr)»;
//				«ENDIF»
//			«ENDFOR»
//		}
//		«ENDFOR»		
//	'''
//	
//	
////************SYSTEM & CASL LIB GENERATION***********//	
//
//	def generateParameters(System sys) '''
//		//Fields
//		«FOR field : sys.system_parameters.fields»
//		«IF (field instanceof Field)»
//			private «printOutFieldDeclarations(field as Field)»;
//		«ELSEIF (field instanceof State_Block)»
//		«ENDIF»
//		«ENDFOR»
//		
//		//Getters & Setters
//		«FOR field : sys.system_parameters.fields»
//			«IF (field instanceof Field)»
//			public void set«field.declarations.name.toFirstUpper»(«field.declarations.type.name» «field.declarations.name»);
//			public «field.declarations.type.name» get«field.declarations.name.toFirstUpper»() {
//				return «field.declarations.name»;
//			}«ENDIF»
//		«ENDFOR»
//	'''
//		
////*************HELPER METHODS*************//
//
//	def printFunctionParameter (Function_Parameter fp) 
//		'''«IF fp.type != null»«fp.type.name» «fp.name»«ELSEIF fp.agent != null»«fp.agent.name» «fp.name»«ELSEIF fp.env != null»«fp.env.name» «fp.name»«ENDIF»'''
//		
//	def String printFunctionParameters(EList<Symbol> fps){
//		val parameterSize = fps.size
//		var strOut = "";
//		if (parameterSize == 0) {
//			return ""
//		} else {
//			for (i : 0 ..< parameterSize -1){
//				strOut += printFunctionParameter(fps.get(i) as Function_Parameter)+', '			
//			}
//			strOut += printFunctionParameter(fps.get(parameterSize-1) as Function_Parameter)
//			return strOut
//		}		
//	}
//	
//	def String printFunctionArgs(EList<Expression> far) {
//		val parameterSize = far.size
//		var strOut = "";
//		if (parameterSize == 0) {
//			return ""
//		} else {
//			for (i : 0 ..< parameterSize -1){
//				strOut += printExpression(far.get(i) as Expression)+', '			
//			}
//			strOut += printExpression(far.get(parameterSize-1) as Expression)
//			return strOut
//		}	
//	}
//		
//	def printExpression(Expression expr){
//		if (expr instanceof SelfCall)
//			'''«(expr as SelfCall).selfCall.ref.name»'''
//		else if (expr instanceof NumberLiteral)
//			'''«(expr as NumberLiteral).value»'''
//		else if (expr instanceof BooleanType)
//			'''«(expr as BooleanType).bool»'''
//		else if (expr instanceof SystemCallObj)
//			'''«(expr as SystemCallObj).sysCall.call»'''
//		else if (expr instanceof StringLiteral)
//			'''«(expr as StringLiteral).value»'''
//		else if (expr instanceof TypeRef)
//			'''«(expr as TypeRef).type.name»«IF expr.call != null ».«expr.call»«ENDIF»'''
//		else if (expr instanceof FeatureCall)
//			'''«printFeatureCall((expr as FeatureCall).func)»'''
//		else if (expr instanceof IfStatement)
//			printIfStatement((expr as IfStatement))	
//		else if (expr instanceof AndOrExpression)
////			val boolExp = expr as AndOrExpression
//			'''«printExpression((expr as AndOrExpression).left)» «(expr as AndOrExpression).op» «printExpression((expr as AndOrExpression).right)»'''
//		else if (expr instanceof Comparison)
//			'''«printExpression((expr as Comparison).left)» «(expr as Comparison).op» «printExpression((expr as Comparison).right)»'''
//		else if (expr instanceof Equals)
//			'''«printExpression((expr as Equals).left)» == «printExpression((expr as Equals).right)»'''
//		else if (expr instanceof Plus)
//			'''«printExpression((expr as Plus).left)» «(expr as Plus).op» «printExpression((expr as Plus).right)»'''
//		else if (expr instanceof Multi)
//			'''«printExpression((expr as Multi).left)» «(expr as Multi).op» «printExpression((expr as Multi).right)»'''
//		else if (expr instanceof BooleanNegation)
//			'''!«printExpression((expr as BooleanNegation).expression)»'''
//		else if (expr instanceof ArithmeticSigned)
//			'''-«printExpression((expr as ArithmeticSigned).expression)»'''
//		else '''ERROR: «expr.toString»'''
//	}	
//	
//	def printFeatureCall(FeatureCall fc) {		
//		if (fc instanceof AdaptiveProcessFeatureCall)
//		'''«(fc as AdaptiveProcessFeatureCall).process.name»(«printFunctionArgs(fc.inputs)»)'''
//		else if (fc instanceof InteractionFeatureCall)
//		'''«(fc as InteractionFeatureCall).process.name»(«printFunctionArgs(fc.inputs)»)'''
//		else if (fc instanceof FunctionFeatureCall)
//		'''«(fc as FunctionFeatureCall).process.name»(«printFunctionArgs(fc.inputs)»)'''
//		else if (fc instanceof BehaviorFeatureCall)
//		'''«(fc as BehaviorFeatureCall).process.name»(«printFunctionArgs(fc.inputs)»)'''
//		else '''ERROR WITH FEATURE CALL'''	
//	}
//	
//	def printOutFieldDeclarations(Field f){
//		//Prints out the type, var name and expression if it has one.
//		val fdt = f.declarations as DataTypeDeclaration
//		if (fdt.type != null)
//			if (fdt.expr != null)
//			'''«fdt.type.name» «fdt.name» = «printExpression(fdt.expr)»'''
//			else 
//			'''«fdt.type.name» «fdt.name»'''
//		else if (fdt.obj != null)
//			'''«fdt.obj.name» «fdt.name» = «printExpression(fdt.expr)»'''
//			else 
//			'''«fdt.obj.name»'''
//	}
//	def printIfStatement(IfStatement is) {'''
//		if («printExpression(is.condition)») {
//			«FOR expr : is.then»«printExpression(expr)»«IF !(expr instanceof IfStatement)»;«ENDIF»«ENDFOR»
//		}«IF is.elseifcond != null» else if («printExpression(is.elseifcond)») {
//			«FOR expr : is.elseifthen»«printExpression(expr)»;«ENDFOR»
//		}«ENDIF»«IF !is.elseexp.isEmpty» else {
//			«FOR expr : is.elseexp»«printExpression(expr)»«IF !(expr instanceof IfStatement)»;«ENDIF»«ENDFOR»
//		}«ENDIF»'''
//	}
//	
//	def determineReturnType(){
//		
//	}
//
//	/******THE REPAST CRAP (SINCE IT WON'T GO IN IT'S OWN FILE) **********/
//	def String generateSystemBuilder(){
//		var imports = "";
//		imports = 
//"import java.io.BufferedReader;
//import java.io.FileReader;
//import java.util.ArrayList;
//import java.util.List;
//
//import repast.simphony.context.Context;
//import repast.simphony.context.space.continuous.ContinuousSpaceFactory;
//import repast.simphony.context.space.continuous.ContinuousSpaceFactoryFinder;
//import repast.simphony.context.space.grid.GridFactory;
//import repast.simphony.context.space.grid.GridFactoryFinder;
//import repast.simphony.dataLoader.ContextBuilder;
//import repast.simphony.engine.environment.RunEnvironment;
//import repast.simphony.engine.schedule.ISchedule;
//import repast.simphony.engine.schedule.ScheduleParameters;
//import repast.simphony.parameter.Parameters;
//import repast.simphony.space.continuous.ContinuousSpace;
//import repast.simphony.space.continuous.SimpleCartesianAdder;
//import repast.simphony.space.grid.Grid;
//import repast.simphony.space.grid.GridBuilderParameters;
//import repast.simphony.space.grid.SimpleGridAdder;
//import repast.simphony.space.grid.StrictBorders;"
//					return imports;
//	}
//	
//	
//	def String generateAgentBuilder(){
//		//imports
//		var imports = "";
//		imports = 
//"import java.awt.Color;
//import java.util.ArrayList;
//import java.util.List;
//import repast.simphony.context.Context;
//import repast.simphony.engine.environment.RunEnvironment;
//import repast.simphony.engine.schedule.ISchedule;
//import repast.simphony.engine.schedule.ScheduleParameters;
//import repast.simphony.query.space.grid.GridCell;
//import repast.simphony.query.space.grid.GridCellNgh;
//import repast.simphony.space.continuous.ContinuousSpace;
//import repast.simphony.space.grid.Grid;
//import repast.simphony.space.grid.GridPoint;"
//			
//		return imports
//	}
//	
//	def String generateEnvironmentBuilder(){
//		
//	}


}