/**
 * generated by Xtext 2.12.0
 */
package uofa.lbirdsey.castle.casl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import uofa.lbirdsey.castle.casl.CASL_Macro_MetricSwitch;
import uofa.lbirdsey.castle.casl.CaslPackage;
import uofa.lbirdsey.castle.casl.Expression;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>CASL Macro Metric Switch</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uofa.lbirdsey.castle.casl.impl.CASL_Macro_MetricSwitchImpl#isSw <em>Sw</em>}</li>
 *   <li>{@link uofa.lbirdsey.castle.casl.impl.CASL_Macro_MetricSwitchImpl#getManualUpdates <em>Manual Updates</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CASL_Macro_MetricSwitchImpl extends CASL_MacroImpl implements CASL_Macro_MetricSwitch
{
  /**
   * The default value of the '{@link #isSw() <em>Sw</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSw()
   * @generated
   * @ordered
   */
  protected static final boolean SW_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isSw() <em>Sw</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSw()
   * @generated
   * @ordered
   */
  protected boolean sw = SW_EDEFAULT;

  /**
   * The cached value of the '{@link #getManualUpdates() <em>Manual Updates</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getManualUpdates()
   * @generated
   * @ordered
   */
  protected EList<Expression> manualUpdates;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CASL_Macro_MetricSwitchImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CaslPackage.eINSTANCE.getCASL_Macro_MetricSwitch();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isSw()
  {
    return sw;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSw(boolean newSw)
  {
    boolean oldSw = sw;
    sw = newSw;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CaslPackage.CASL_MACRO_METRIC_SWITCH__SW, oldSw, sw));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Expression> getManualUpdates()
  {
    if (manualUpdates == null)
    {
      manualUpdates = new EObjectContainmentEList<Expression>(Expression.class, this, CaslPackage.CASL_MACRO_METRIC_SWITCH__MANUAL_UPDATES);
    }
    return manualUpdates;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CaslPackage.CASL_MACRO_METRIC_SWITCH__MANUAL_UPDATES:
        return ((InternalEList<?>)getManualUpdates()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CaslPackage.CASL_MACRO_METRIC_SWITCH__SW:
        return isSw();
      case CaslPackage.CASL_MACRO_METRIC_SWITCH__MANUAL_UPDATES:
        return getManualUpdates();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CaslPackage.CASL_MACRO_METRIC_SWITCH__SW:
        setSw((Boolean)newValue);
        return;
      case CaslPackage.CASL_MACRO_METRIC_SWITCH__MANUAL_UPDATES:
        getManualUpdates().clear();
        getManualUpdates().addAll((Collection<? extends Expression>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CaslPackage.CASL_MACRO_METRIC_SWITCH__SW:
        setSw(SW_EDEFAULT);
        return;
      case CaslPackage.CASL_MACRO_METRIC_SWITCH__MANUAL_UPDATES:
        getManualUpdates().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CaslPackage.CASL_MACRO_METRIC_SWITCH__SW:
        return sw != SW_EDEFAULT;
      case CaslPackage.CASL_MACRO_METRIC_SWITCH__MANUAL_UPDATES:
        return manualUpdates != null && !manualUpdates.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (sw: ");
    result.append(sw);
    result.append(')');
    return result.toString();
  }

} //CASL_Macro_MetricSwitchImpl
