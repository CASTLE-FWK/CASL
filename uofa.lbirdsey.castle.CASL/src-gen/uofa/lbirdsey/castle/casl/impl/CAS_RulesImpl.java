/**
 * generated by Xtext 2.11.0
 */
package uofa.lbirdsey.castle.casl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

import uofa.lbirdsey.castle.casl.CAS_Inspection_Level;
import uofa.lbirdsey.castle.casl.CAS_Rule_Exception;
import uofa.lbirdsey.castle.casl.CAS_Rule_Types;
import uofa.lbirdsey.castle.casl.CAS_Rules;
import uofa.lbirdsey.castle.casl.CAS_Semantic_Group_Switch;
import uofa.lbirdsey.castle.casl.CaslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>CAS Rules</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uofa.lbirdsey.castle.casl.impl.CAS_RulesImpl#getCas_rule <em>Cas rule</em>}</li>
 *   <li>{@link uofa.lbirdsey.castle.casl.impl.CAS_RulesImpl#getCas_check <em>Cas check</em>}</li>
 *   <li>{@link uofa.lbirdsey.castle.casl.impl.CAS_RulesImpl#getExceptions <em>Exceptions</em>}</li>
 *   <li>{@link uofa.lbirdsey.castle.casl.impl.CAS_RulesImpl#getSemanticgroups <em>Semanticgroups</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CAS_RulesImpl extends MinimalEObjectImpl.Container implements CAS_Rules
{
  /**
   * The default value of the '{@link #getCas_rule() <em>Cas rule</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCas_rule()
   * @generated
   * @ordered
   */
  protected static final CAS_Rule_Types CAS_RULE_EDEFAULT = CAS_Rule_Types.STRICT;

  /**
   * The cached value of the '{@link #getCas_rule() <em>Cas rule</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCas_rule()
   * @generated
   * @ordered
   */
  protected CAS_Rule_Types cas_rule = CAS_RULE_EDEFAULT;

  /**
   * The default value of the '{@link #getCas_check() <em>Cas check</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCas_check()
   * @generated
   * @ordered
   */
  protected static final CAS_Inspection_Level CAS_CHECK_EDEFAULT = CAS_Inspection_Level.STRONG;

  /**
   * The cached value of the '{@link #getCas_check() <em>Cas check</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCas_check()
   * @generated
   * @ordered
   */
  protected CAS_Inspection_Level cas_check = CAS_CHECK_EDEFAULT;

  /**
   * The cached value of the '{@link #getExceptions() <em>Exceptions</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExceptions()
   * @generated
   * @ordered
   */
  protected EList<CAS_Rule_Exception> exceptions;

  /**
   * The default value of the '{@link #getSemanticgroups() <em>Semanticgroups</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSemanticgroups()
   * @generated
   * @ordered
   */
  protected static final CAS_Semantic_Group_Switch SEMANTICGROUPS_EDEFAULT = CAS_Semantic_Group_Switch.ENABLE;

  /**
   * The cached value of the '{@link #getSemanticgroups() <em>Semanticgroups</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSemanticgroups()
   * @generated
   * @ordered
   */
  protected CAS_Semantic_Group_Switch semanticgroups = SEMANTICGROUPS_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CAS_RulesImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CaslPackage.eINSTANCE.getCAS_Rules();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CAS_Rule_Types getCas_rule()
  {
    return cas_rule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCas_rule(CAS_Rule_Types newCas_rule)
  {
    CAS_Rule_Types oldCas_rule = cas_rule;
    cas_rule = newCas_rule == null ? CAS_RULE_EDEFAULT : newCas_rule;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CaslPackage.CAS_RULES__CAS_RULE, oldCas_rule, cas_rule));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CAS_Inspection_Level getCas_check()
  {
    return cas_check;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCas_check(CAS_Inspection_Level newCas_check)
  {
    CAS_Inspection_Level oldCas_check = cas_check;
    cas_check = newCas_check == null ? CAS_CHECK_EDEFAULT : newCas_check;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CaslPackage.CAS_RULES__CAS_CHECK, oldCas_check, cas_check));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<CAS_Rule_Exception> getExceptions()
  {
    if (exceptions == null)
    {
      exceptions = new EDataTypeEList<CAS_Rule_Exception>(CAS_Rule_Exception.class, this, CaslPackage.CAS_RULES__EXCEPTIONS);
    }
    return exceptions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CAS_Semantic_Group_Switch getSemanticgroups()
  {
    return semanticgroups;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSemanticgroups(CAS_Semantic_Group_Switch newSemanticgroups)
  {
    CAS_Semantic_Group_Switch oldSemanticgroups = semanticgroups;
    semanticgroups = newSemanticgroups == null ? SEMANTICGROUPS_EDEFAULT : newSemanticgroups;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CaslPackage.CAS_RULES__SEMANTICGROUPS, oldSemanticgroups, semanticgroups));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CaslPackage.CAS_RULES__CAS_RULE:
        return getCas_rule();
      case CaslPackage.CAS_RULES__CAS_CHECK:
        return getCas_check();
      case CaslPackage.CAS_RULES__EXCEPTIONS:
        return getExceptions();
      case CaslPackage.CAS_RULES__SEMANTICGROUPS:
        return getSemanticgroups();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CaslPackage.CAS_RULES__CAS_RULE:
        setCas_rule((CAS_Rule_Types)newValue);
        return;
      case CaslPackage.CAS_RULES__CAS_CHECK:
        setCas_check((CAS_Inspection_Level)newValue);
        return;
      case CaslPackage.CAS_RULES__EXCEPTIONS:
        getExceptions().clear();
        getExceptions().addAll((Collection<? extends CAS_Rule_Exception>)newValue);
        return;
      case CaslPackage.CAS_RULES__SEMANTICGROUPS:
        setSemanticgroups((CAS_Semantic_Group_Switch)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CaslPackage.CAS_RULES__CAS_RULE:
        setCas_rule(CAS_RULE_EDEFAULT);
        return;
      case CaslPackage.CAS_RULES__CAS_CHECK:
        setCas_check(CAS_CHECK_EDEFAULT);
        return;
      case CaslPackage.CAS_RULES__EXCEPTIONS:
        getExceptions().clear();
        return;
      case CaslPackage.CAS_RULES__SEMANTICGROUPS:
        setSemanticgroups(SEMANTICGROUPS_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CaslPackage.CAS_RULES__CAS_RULE:
        return cas_rule != CAS_RULE_EDEFAULT;
      case CaslPackage.CAS_RULES__CAS_CHECK:
        return cas_check != CAS_CHECK_EDEFAULT;
      case CaslPackage.CAS_RULES__EXCEPTIONS:
        return exceptions != null && !exceptions.isEmpty();
      case CaslPackage.CAS_RULES__SEMANTICGROUPS:
        return semanticgroups != SEMANTICGROUPS_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (cas_rule: ");
    result.append(cas_rule);
    result.append(", cas_check: ");
    result.append(cas_check);
    result.append(", exceptions: ");
    result.append(exceptions);
    result.append(", semanticgroups: ");
    result.append(semanticgroups);
    result.append(')');
    return result.toString();
  }

} //CAS_RulesImpl
