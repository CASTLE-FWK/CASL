/**
 * generated by Xtext 2.13.0
 */
package uofa.lbirdsey.castle.casl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import uofa.lbirdsey.castle.casl.CASL_Macro_Visualize;
import uofa.lbirdsey.castle.casl.CaslPackage;
import uofa.lbirdsey.castle.casl.Expression;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>CASL Macro Visualize</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uofa.lbirdsey.castle.casl.impl.CASL_Macro_VisualizeImpl#getProjectionPosition <em>Projection Position</em>}</li>
 *   <li>{@link uofa.lbirdsey.castle.casl.impl.CASL_Macro_VisualizeImpl#getProjectionColourUpdater <em>Projection Colour Updater</em>}</li>
 *   <li>{@link uofa.lbirdsey.castle.casl.impl.CASL_Macro_VisualizeImpl#getProjectionShape <em>Projection Shape</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CASL_Macro_VisualizeImpl extends CASL_MacroImpl implements CASL_Macro_Visualize
{
  /**
   * The cached value of the '{@link #getProjectionPosition() <em>Projection Position</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProjectionPosition()
   * @generated
   * @ordered
   */
  protected Expression projectionPosition;

  /**
   * The cached value of the '{@link #getProjectionColourUpdater() <em>Projection Colour Updater</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProjectionColourUpdater()
   * @generated
   * @ordered
   */
  protected Expression projectionColourUpdater;

  /**
   * The default value of the '{@link #getProjectionShape() <em>Projection Shape</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProjectionShape()
   * @generated
   * @ordered
   */
  protected static final String PROJECTION_SHAPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getProjectionShape() <em>Projection Shape</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProjectionShape()
   * @generated
   * @ordered
   */
  protected String projectionShape = PROJECTION_SHAPE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CASL_Macro_VisualizeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CaslPackage.eINSTANCE.getCASL_Macro_Visualize();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getProjectionPosition()
  {
    return projectionPosition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProjectionPosition(Expression newProjectionPosition, NotificationChain msgs)
  {
    Expression oldProjectionPosition = projectionPosition;
    projectionPosition = newProjectionPosition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CaslPackage.CASL_MACRO_VISUALIZE__PROJECTION_POSITION, oldProjectionPosition, newProjectionPosition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setProjectionPosition(Expression newProjectionPosition)
  {
    if (newProjectionPosition != projectionPosition)
    {
      NotificationChain msgs = null;
      if (projectionPosition != null)
        msgs = ((InternalEObject)projectionPosition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CaslPackage.CASL_MACRO_VISUALIZE__PROJECTION_POSITION, null, msgs);
      if (newProjectionPosition != null)
        msgs = ((InternalEObject)newProjectionPosition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CaslPackage.CASL_MACRO_VISUALIZE__PROJECTION_POSITION, null, msgs);
      msgs = basicSetProjectionPosition(newProjectionPosition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CaslPackage.CASL_MACRO_VISUALIZE__PROJECTION_POSITION, newProjectionPosition, newProjectionPosition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getProjectionColourUpdater()
  {
    return projectionColourUpdater;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProjectionColourUpdater(Expression newProjectionColourUpdater, NotificationChain msgs)
  {
    Expression oldProjectionColourUpdater = projectionColourUpdater;
    projectionColourUpdater = newProjectionColourUpdater;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CaslPackage.CASL_MACRO_VISUALIZE__PROJECTION_COLOUR_UPDATER, oldProjectionColourUpdater, newProjectionColourUpdater);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setProjectionColourUpdater(Expression newProjectionColourUpdater)
  {
    if (newProjectionColourUpdater != projectionColourUpdater)
    {
      NotificationChain msgs = null;
      if (projectionColourUpdater != null)
        msgs = ((InternalEObject)projectionColourUpdater).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CaslPackage.CASL_MACRO_VISUALIZE__PROJECTION_COLOUR_UPDATER, null, msgs);
      if (newProjectionColourUpdater != null)
        msgs = ((InternalEObject)newProjectionColourUpdater).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CaslPackage.CASL_MACRO_VISUALIZE__PROJECTION_COLOUR_UPDATER, null, msgs);
      msgs = basicSetProjectionColourUpdater(newProjectionColourUpdater, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CaslPackage.CASL_MACRO_VISUALIZE__PROJECTION_COLOUR_UPDATER, newProjectionColourUpdater, newProjectionColourUpdater));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getProjectionShape()
  {
    return projectionShape;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setProjectionShape(String newProjectionShape)
  {
    String oldProjectionShape = projectionShape;
    projectionShape = newProjectionShape;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CaslPackage.CASL_MACRO_VISUALIZE__PROJECTION_SHAPE, oldProjectionShape, projectionShape));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CaslPackage.CASL_MACRO_VISUALIZE__PROJECTION_POSITION:
        return basicSetProjectionPosition(null, msgs);
      case CaslPackage.CASL_MACRO_VISUALIZE__PROJECTION_COLOUR_UPDATER:
        return basicSetProjectionColourUpdater(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CaslPackage.CASL_MACRO_VISUALIZE__PROJECTION_POSITION:
        return getProjectionPosition();
      case CaslPackage.CASL_MACRO_VISUALIZE__PROJECTION_COLOUR_UPDATER:
        return getProjectionColourUpdater();
      case CaslPackage.CASL_MACRO_VISUALIZE__PROJECTION_SHAPE:
        return getProjectionShape();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CaslPackage.CASL_MACRO_VISUALIZE__PROJECTION_POSITION:
        setProjectionPosition((Expression)newValue);
        return;
      case CaslPackage.CASL_MACRO_VISUALIZE__PROJECTION_COLOUR_UPDATER:
        setProjectionColourUpdater((Expression)newValue);
        return;
      case CaslPackage.CASL_MACRO_VISUALIZE__PROJECTION_SHAPE:
        setProjectionShape((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CaslPackage.CASL_MACRO_VISUALIZE__PROJECTION_POSITION:
        setProjectionPosition((Expression)null);
        return;
      case CaslPackage.CASL_MACRO_VISUALIZE__PROJECTION_COLOUR_UPDATER:
        setProjectionColourUpdater((Expression)null);
        return;
      case CaslPackage.CASL_MACRO_VISUALIZE__PROJECTION_SHAPE:
        setProjectionShape(PROJECTION_SHAPE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CaslPackage.CASL_MACRO_VISUALIZE__PROJECTION_POSITION:
        return projectionPosition != null;
      case CaslPackage.CASL_MACRO_VISUALIZE__PROJECTION_COLOUR_UPDATER:
        return projectionColourUpdater != null;
      case CaslPackage.CASL_MACRO_VISUALIZE__PROJECTION_SHAPE:
        return PROJECTION_SHAPE_EDEFAULT == null ? projectionShape != null : !PROJECTION_SHAPE_EDEFAULT.equals(projectionShape);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (projectionShape: ");
    result.append(projectionShape);
    result.append(')');
    return result.toString();
  }

} //CASL_Macro_VisualizeImpl
