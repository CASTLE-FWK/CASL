/**
 * generated by Xtext 2.12.0
 */
package uofa.lbirdsey.castle.casl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import uofa.lbirdsey.castle.casl.CASL_Macro_InitLogger;
import uofa.lbirdsey.castle.casl.CaslPackage;
import uofa.lbirdsey.castle.casl.Expression;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>CASL Macro Init Logger</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uofa.lbirdsey.castle.casl.impl.CASL_Macro_InitLoggerImpl#isMute <em>Mute</em>}</li>
 *   <li>{@link uofa.lbirdsey.castle.casl.impl.CASL_Macro_InitLoggerImpl#isToConsole <em>To Console</em>}</li>
 *   <li>{@link uofa.lbirdsey.castle.casl.impl.CASL_Macro_InitLoggerImpl#isToFile <em>To File</em>}</li>
 *   <li>{@link uofa.lbirdsey.castle.casl.impl.CASL_Macro_InitLoggerImpl#getFilePath <em>File Path</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CASL_Macro_InitLoggerImpl extends CASL_MacroImpl implements CASL_Macro_InitLogger
{
  /**
   * The default value of the '{@link #isMute() <em>Mute</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isMute()
   * @generated
   * @ordered
   */
  protected static final boolean MUTE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isMute() <em>Mute</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isMute()
   * @generated
   * @ordered
   */
  protected boolean mute = MUTE_EDEFAULT;

  /**
   * The default value of the '{@link #isToConsole() <em>To Console</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isToConsole()
   * @generated
   * @ordered
   */
  protected static final boolean TO_CONSOLE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isToConsole() <em>To Console</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isToConsole()
   * @generated
   * @ordered
   */
  protected boolean toConsole = TO_CONSOLE_EDEFAULT;

  /**
   * The default value of the '{@link #isToFile() <em>To File</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isToFile()
   * @generated
   * @ordered
   */
  protected static final boolean TO_FILE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isToFile() <em>To File</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isToFile()
   * @generated
   * @ordered
   */
  protected boolean toFile = TO_FILE_EDEFAULT;

  /**
   * The cached value of the '{@link #getFilePath() <em>File Path</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFilePath()
   * @generated
   * @ordered
   */
  protected Expression filePath;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CASL_Macro_InitLoggerImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CaslPackage.eINSTANCE.getCASL_Macro_InitLogger();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isMute()
  {
    return mute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMute(boolean newMute)
  {
    boolean oldMute = mute;
    mute = newMute;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CaslPackage.CASL_MACRO_INIT_LOGGER__MUTE, oldMute, mute));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isToConsole()
  {
    return toConsole;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setToConsole(boolean newToConsole)
  {
    boolean oldToConsole = toConsole;
    toConsole = newToConsole;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CaslPackage.CASL_MACRO_INIT_LOGGER__TO_CONSOLE, oldToConsole, toConsole));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isToFile()
  {
    return toFile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setToFile(boolean newToFile)
  {
    boolean oldToFile = toFile;
    toFile = newToFile;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CaslPackage.CASL_MACRO_INIT_LOGGER__TO_FILE, oldToFile, toFile));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getFilePath()
  {
    return filePath;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFilePath(Expression newFilePath, NotificationChain msgs)
  {
    Expression oldFilePath = filePath;
    filePath = newFilePath;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CaslPackage.CASL_MACRO_INIT_LOGGER__FILE_PATH, oldFilePath, newFilePath);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFilePath(Expression newFilePath)
  {
    if (newFilePath != filePath)
    {
      NotificationChain msgs = null;
      if (filePath != null)
        msgs = ((InternalEObject)filePath).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CaslPackage.CASL_MACRO_INIT_LOGGER__FILE_PATH, null, msgs);
      if (newFilePath != null)
        msgs = ((InternalEObject)newFilePath).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CaslPackage.CASL_MACRO_INIT_LOGGER__FILE_PATH, null, msgs);
      msgs = basicSetFilePath(newFilePath, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CaslPackage.CASL_MACRO_INIT_LOGGER__FILE_PATH, newFilePath, newFilePath));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CaslPackage.CASL_MACRO_INIT_LOGGER__FILE_PATH:
        return basicSetFilePath(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CaslPackage.CASL_MACRO_INIT_LOGGER__MUTE:
        return isMute();
      case CaslPackage.CASL_MACRO_INIT_LOGGER__TO_CONSOLE:
        return isToConsole();
      case CaslPackage.CASL_MACRO_INIT_LOGGER__TO_FILE:
        return isToFile();
      case CaslPackage.CASL_MACRO_INIT_LOGGER__FILE_PATH:
        return getFilePath();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CaslPackage.CASL_MACRO_INIT_LOGGER__MUTE:
        setMute((Boolean)newValue);
        return;
      case CaslPackage.CASL_MACRO_INIT_LOGGER__TO_CONSOLE:
        setToConsole((Boolean)newValue);
        return;
      case CaslPackage.CASL_MACRO_INIT_LOGGER__TO_FILE:
        setToFile((Boolean)newValue);
        return;
      case CaslPackage.CASL_MACRO_INIT_LOGGER__FILE_PATH:
        setFilePath((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CaslPackage.CASL_MACRO_INIT_LOGGER__MUTE:
        setMute(MUTE_EDEFAULT);
        return;
      case CaslPackage.CASL_MACRO_INIT_LOGGER__TO_CONSOLE:
        setToConsole(TO_CONSOLE_EDEFAULT);
        return;
      case CaslPackage.CASL_MACRO_INIT_LOGGER__TO_FILE:
        setToFile(TO_FILE_EDEFAULT);
        return;
      case CaslPackage.CASL_MACRO_INIT_LOGGER__FILE_PATH:
        setFilePath((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CaslPackage.CASL_MACRO_INIT_LOGGER__MUTE:
        return mute != MUTE_EDEFAULT;
      case CaslPackage.CASL_MACRO_INIT_LOGGER__TO_CONSOLE:
        return toConsole != TO_CONSOLE_EDEFAULT;
      case CaslPackage.CASL_MACRO_INIT_LOGGER__TO_FILE:
        return toFile != TO_FILE_EDEFAULT;
      case CaslPackage.CASL_MACRO_INIT_LOGGER__FILE_PATH:
        return filePath != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (mute: ");
    result.append(mute);
    result.append(", toConsole: ");
    result.append(toConsole);
    result.append(", toFile: ");
    result.append(toFile);
    result.append(')');
    return result.toString();
  }

} //CASL_Macro_InitLoggerImpl
